import react
import react.components.Page
import orm.models as models
import orm.tools as tools

View, Page = react.get_components('View', 'Page')

Table, Header, Row, Cell, Pagination = react.get_framework_components('DataTable', 'DataTableHeader', 'DataTableRow', 'DataTableCell', 'DataTablePagination')

class Tree(React.Component):

    state = {'records_formatted': [], 'page': 0, 'perPage': 50, 'numberOfRows': 0, 'numberOfPages': 1}

    def __init__(self):
        return

    @async
    def componentDidMount(self):
        props = self.props
        model = self.props.model
        args = []
        if not self.props.isTreeView:
           await [models.env.context.wait_active_id]
           args.push(['id', 'in', models.env.context.active_id[props.field_name] or []])
        records = await [models.env[model].search(*args)]
        records_formatted = await [records.read(True, [children.props.name for children in self.props.children])]
        #alert(JSON.stringify(records_formatted))
        return self.setState({'records': records, 'records_formatted': records_formatted, 'numberOfRows': records.length, 'numberOfPages': records.length / self.state.perPage})

    def render(self):
        #alert(JSON.stringify(self.state))
        props = self.props
        model = self.props.model
        rightActions = [{'name': 'filter-list'}]
        def onPressAdd():
            if self.props.isTreeView: return self.props.history.push('/form/' + model)
        add = {'name': 'add', 'onPress': onPressAdd}
        if not props.isTreeView:
           context = models.env.context
           field = models.env[props.view_model]._fields[props.field_name]
           props.readonly = field.readonly or props.readonly
           readonly = props.readonly(active_id) if v'props.readonly instanceof Function' else props.readonly
           if not (readonly or not context.editing): rightActions.push(add)
        else: rightActions.push(add)
        rightActions.push({'name': 'more-vert'})

        def onChangePage(page):
            return self.setState({'page': page})

        def onChangeRowsPerPage(perPage):
            return self.setState({'perPage': perPage})

        def onPressWrap(id):
            def onPress():
                if not self.props.isTreeView and rightActions.length == 3: return
                return self.props.history.push('/form/' + model + '/' + id)
            return onPress

        tree = (
            View (
                Header (title=self.props.title or tools.view[model].string, rightActions=rightActions),
                Row ([
                    Cell (text=children.props.string or models.env[model]._fields[children.props.name].string, type='header')
                for children in tools.each(self.props.children or [])]), self.state.records_formatted.length > 0 and [
                Row (key=record.id, hover=True, onPress=onPressWrap(record.id), [
                    Cell (text=record[children.props.name])
                for children in tools.each(self.props.children or [])])
                for record in self.state.records_formatted],
                Pagination (page=self.state.page, perPage=self.state.perPage, onChangePage=onChangePage, onChangeRowsPerPage=onChangeRowsPerPage, numberOfRows=self.state.numberOfRows, numberOfPages=self.state.numberOfPages)
            )
        )

        if not self.props.isTreeView or self.props.isPopup: return tree

        return (
            Page (tree)
        )

react.register_component(Tree)
