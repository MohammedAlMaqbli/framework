import react
import react.components.Page
import react.components.Tree
import orm.models as models
import orm.tools as tools

View, Page = react.get_components('View', 'Page')

class HomePage(React.Component):

    def __init__(self):
        return

    def render(self):
        return (
            Page (history=self.props.history)
        )

function_string =
"""if (!active_id) return false;
var context = models.env.context;
var True = true;
var False = false;
var None = null;
return """

def parseAttribute(props, element):
    for attribute in element.attributes:
        props[attribute] = element.attributes[attribute]
    for attribute in ['invisible', 'required', 'readonly']:
        if attribute in props:
           if props[attribute] in ['true', 'True']: props[attribute] = True
           if props[attribute] in ['false', 'False']: props[attribute] = False
           if props[attribute].constructor == Boolean: continue
           props[attribute] = new (Function.prototype.bind.apply(Function, [None, 'models', 'tools', 'active_id', function_string + props[attribute].replace(' == ', ' === ').replace(' != ', ' !== ')]))();
    if props.domain: props.domain = new (Function.prototype.bind.apply(Function, [None, 'models', 'tools', 'active_id', function_string + '[' + props.domain + ']']))();

def parseTreeView(view, title):
    customComponents = {'Tree': react.registered_components.Tree, 'Field': None}
    view = tools.client.XMLParser(view);
    console.log(view)
    if title: view.attributes['title'] = title
    def recurse(elements, parent_props):
        components = []
        Array.prototype.slice.call(elements).forEach(
        def (element):
        #for element in elements:
            console.log(element)
            if not element.tagName:
               def render(): return React.createElement(tools.client.Native.Text, {}, element.text)
               components.push(render)
               return
            component = customComponents[element.tagName[0].toUpperCase() + element.tagName.toLowerCase().slice(1)] or customComponents[element.tagName] or element.tagName
            props = {} #{'model': model, 'view_model': model}
            parseAttribute(props, element)
            props.isTreeView = True
            children = recurse(element.children, props) #or [def render(): return React.createElement(tools.client.Native.Text, {}, element.innerHTML);]
            components.push(def render(**new_props): return React.createElement(component, tools.merge(new_props, props), children.map(def (result): return result();));)
        )
        #if not components.length: return None
        return components
    return recurse([view], True)[0]

cachedTreeViews = {}

class TreePage(React.Component):

    def componentDidMount(self):
        model = self.model
        mode = self.mode
        if tools.view[model].custom_init and tools.view[model].custom_init[model + '.' + mode]:
           tools.view[model].custom_init[model + '.' + mode].bind(self)(self.props)

    def render(self):
        self.props.history.match = self.props.match
        props = self.props
        models.env.context.active_id = None
        model = self.props.history.match.params.model
        mode = 'tree'
        self.model = model
        self.mode = mode
        view = tools.view[model].tree
        models.env.context.active_model = mode
        if not cachedTreeViews[view + ('-' + props.title if props.title else '')]:
           cachedTreeViews[view + ('-' + props.title if props.title else '')] = parseTreeView(view, props.title)
        return cachedTreeViews[view + ('-' + props.title if props.title else '')](model=model, history=self.props.history)

#react.register_component(TreePage)
