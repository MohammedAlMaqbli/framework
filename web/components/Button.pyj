import orm.models as models
import orm.tools as tools
import web.react as react

Button = react.get_framework_components('Button')

@async
def button(props):
    def wait():
        return not client.api.globals.onchange_running
    await [tools.wait_exist(wait)];
    if props.name:
       try:
           if models.env.context.editing:
              await [models.env.context.edit_function()]
           if not models.env.context.active_error:
              await [models.env.context.active_id[props.name]()]
              await [models.env.context.refresh()]
       except Exception as error:
           await [models.env.context.refresh()]
           client.api.handleClientError(error)
           raise error

class Button(React.Component):

    def onClick(self):
        return button(self.props)

    def render(self, props):
        invisible = props.invisible
        if v'props.invisible instanceof Function':
           invisible = props.invisible(models.env.context.active_id)
        self.state = models.env.context
        return (
          Button (fill=True, onClick=self.onClick, style={'display': 'none' if invisible else 'block', float: 'left', width: 'auto', margin: '10px'},
            props.string
          )
        )

react.register_component(Button)
