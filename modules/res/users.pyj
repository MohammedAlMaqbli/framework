import orm.models as models
import orm.fields as fields
import orm.api as api
import orm.tools as tools
from ir.ui import menu, view
class ResUsers(models.Model):
    _name = 'res.users'

    name = fields.Char(string="Name", required=True)
    login = fields.Char(string="Username/Email", required=True)
    password = fields.Char(string="Password")
    is_superuser = fields.Boolean(string="Is Superuser")

    def create(self, values=False, is_client=tools.configuration.client):
        if values.is_superuser and self._context.uid != models.superuser_id:
           raise Exception("Never set anyone except admin as superuser")
        result = self.__super__('create')(values=values, is_client=is_client)
        if v"typeof window === 'undefined'":
           result = result.then(
           def (record):
               models.env.context.sockets[record.id] = models.env.context.socket.of('/' + record.id)
               return record
           )
        return result

    def write(self, values=False, is_client=tools.configuration.client):
        if values.is_superuser and self._context.uid != models.superuser_id:
           raise Exception("Never set anyone except admin as superuser")
        return self.__super__('write')(values=values, is_client=is_client)

    @api.server
    def _create_partner(self):
        return self.env['res.partner'].create({'name': self.name, 'email': self.login}).then(
        def (result):
            return self
        )

"""default_create = ResUsers.prototype.create
def create(values=False, client=tools.configuration.client):
    self = this
    self.create = default_create
    result = self.create(values=values, client=client)
    if v"typeof window === 'undefined'":
       result = result.then(
       def (record):
            models.env.context.sockets[record.id] = models.env.context.socket.of('/' + record.id)
            return record
       )
    self.create = create
    return result

ResUsers.prototype.create = create
ResUsers.create = create"""

ResUsers()

menu.add({'id': 'settings_users', 'string': 'Users', 'parent': 'settings', 'model': 'res.users', 'sequence': 1})

view.add({'model': 'res.users', 'mode': 'tree', 'string': False, 'arch': """
<tree>
    <field name="name"/>
    <field name="login"/>
</tree>
"""})

view.add({'model': 'res.users', 'mode': 'form', 'string': False, 'arch': """
<form>
    <header>
        <button name="_create_partner" string="Create Contact"/>
    </header>
    <sheet>
        <group>
            <field name="name"/>
        </group>
        <group>
            <field name="login"/>
        </group>
    </sheet>
</form>
"""})

admin_password = 'r4pyd'

def check_admin():
    def create_admin():
        return models.env['res.users'].create({'name': 'Administrator', 'login': 'admin', 'password': admin_password, 'is_superuser': True}).then(
        def (record):
            models.env.user = record
            models.superuser_id = record.id
        ).catch(
        def (error):
            raise error
        )
    if not tools.configuration.client:
       models.env['res.users'].with_context(limit=1).search(['is_superuser', '=', True]).then(
       def (record):
           if not tools.exist(record.length):
              return create_admin()
           else:
              models.superuser_id = record.id
       ).catch(
       def (error):
           return create_admin()
       )
