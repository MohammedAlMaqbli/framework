import orm.models as models
import orm.fields as fields
import orm.tools as tools
import orm.api as api
import stock.move
from stock.wcs import WcsJob
from stock.location import defaults as location_default
from ir.ui import menu, view

pack = {}

class StockPack(models.Model):
    _name = 'stock.pack'

    @api.server
    def _get_box_number_server(self, last_box):
        return self.env['stock.pack'].with_context(order='name desc', limit=1).search(['name', '!=', False]).then(
        def (pack_id):
            if pack_id:
               name = pack_id.name if pack_id.length and pack_id.name else 'Pack 000'
               if last_box and type(last_box) == String:
                  name = tools.max(name, last_box) or last_box or 'Pack 000'
               name = 'Pack ' + str.zfill((parseInt(name.split(' ')[1]) + 1).toString(), 3)
               return name
        )

    def _get_box_number(self):
        return self._get_box_number_server(pack.last_box if tools.exist(pack.last_box) else None).then(
        def (result):
            pack.last_box = result
            return result
        )

    def _get_sizes(self):
        sizes = []
        for index in range(3, 15):
            if (self and (not self._context.allowed_sizes or str(index) in self._context.allowed_sizes)) or not self: sizes.push([str(index), str(index)])
            if (self and (not self._context.allowed_sizes or str(index) + 'T' in self._context.allowed_sizes)) or not self: sizes.push([str(index) + 'T', str(index) + 'T'])
        return sizes

    def _get_available_qty(self):
        if not self.order_id or not self.size or not self.category_id: return 0
        return self.env['adidas.po'].browse(self.order_id).then(
        def (order_id):
            self._set_allowed_sizes(order_id)
            return order_id._get_incoming_qty_size(self.size, self.category_id).then(
            def (incoming_qty):
                return order_id['size_' + self.size] - (incoming_qty or 0)
            )
        )

    @api.server
    def _get_current_qty(self):
        if not self.id: return 0.0
        return self.env['stock.move'].browse(self.move_ids).then(
        def (move_ids):
            qty = 0.0
            for move_id in move_ids:
                qty += move_id.product_qty if move_id.location_dest_id == location_default.internal_id else -move_id.product_qty
            return qty
        )

    def _set_allowed_sizes(self, order_id):
        allowed_sizes = []
        self._context.allowed_sizes = allowed_sizes
        for index in range(3, 15):
            if order_id['size_' + str(index)]: allowed_sizes.push(str(index))
            if order_id['size_' + str(index) + 'T']: allowed_sizes.push(str(index) + 'T')

    name = fields.Char(string="Pack Number", defaults=_get_box_number, required=True)
    date = fields.Datetime(string="Date", defaults=Date)
    location_id = fields.Many2one('stock.location', string="Current Location")
    order_id = fields.Many2one('adidas.po', string="PO Number")
    article = fields.Char(string="Article")
    #picking_ids = fields.Many2many('stock.picking', string="Operations")
    bucket = fields.Selection(*WcsJob.prototype.bucket.selection, string="Current Rack")
    move_ids = fields.One2many('stock.move', 'pack_id', string="Movements")
    category_id = fields.Many2one('product.category', string="Category")
    level = fields.Selection(['1', 'Layer 1'], ['2', 'Layer 2'], ['3', 'Layer 3'], string="Layer")
    size = fields.Selection(_get_sizes, string="Size")
    adidas_product_id = fields.Many2one('product.product', string="Product")
    adidas_product_qty = fields.Float(string="Quantity")
    available_qty = fields.Float(string="Available Quantity", compute=_get_available_qty)
    current_qty = fields.Float(string="On Hand", compute=_get_current_qty, store=False)

    def create(self, values=False, is_client=tools.configuration.client):
        promises = []
        if v"typeof window !== 'undefined'":
           for record in self:
               if record.adidas_product_qty and record.adidas_product_qty > record.values.available_qty:
                  if tools.dialog: tools.dialog.alert('Quantity Insufficient')
                  raise Error('Quantity is Insufficient')
        return self.__super__('create')(values=values, is_client=is_client)

    def print_barcode(self):
        if v'typeof window' != 'undefined' and window.printBarcode:
           for record in self:
               printBarcode(record.name)

    @api.onchange('order_id')
    def onchange_po(self):
        if not self.order_id: return
        return self.env['adidas.po'].browse(self.order_id).then(
        def (order_id):
            self.article = order_id.article
            self._set_allowed_sizes(order_id)
            if not self.size or not self.category_id or not order_id['size_' + self.size]: return
            return order_id._get_incoming_qty_size(self.size, self.category_id).then(
            def (incoming_qty):
                self.available_qty = order_id['size_' + self.size] - (incoming_qty or 0)
            )
        )

    @api.onchange('category_id')
    def onchange_category(self):
        if not self.category_id: return
        if self.size and self.category_id and self.order_id: self.order_id = self.order_id
        return self.env['product.category'].browse(self.category_id).then(
        def (category_id):
            self.level = category_id.level
        )

    @api.onchange('article', 'category_id', 'size')
    def onchange_for_product(self):
        onchange_po = None
        if self.size and self.category_id and self.order_id: onchange_po = self.onchange_po()
        if self.adidas_product_id: return onchange_po
        if self.article and self.category_id and self.size:
           return self.env['product.product'].with_context(limit=1).search(['article', '=', self.article], ['category_id', '=', self.category_id], ['size', '=', self.size]).then(
           def (product_id):
               if product_id.length and not self.adidas_product_id:
                  self.adidas_product_id = product_id.id
               return onchange_po
           )

    @api.onchange('adidas_product_id')
    def onchange_product(self):
        if not self.adidas_product_id: return
        if self.size and self.article and self.category_id: return
        return self.env['product.product'].browse(self.adidas_product_id).then(
        def (product_id):
            if not self.size: self.size = product_id.size
            if not self.article: self.article = product_id.article
            if not self.category_id: self.category_id = product_id.category_id
        )

StockPack()

menu.add({'id': 'pack', 'parent': 'stock', 'string': 'Packs', 'model': 'stock.pack', 'sequence': 6})

view.add({'model': 'stock.pack', 'mode': 'tree', 'string': False, 'arch': """
<tree>
    <field name="name"/>
    <field name="order_id"/>
    <field name="bucket"/>
    <field name="category_id"/>
    <field name="article"/>
    <field name="size"/>
    <field name="current_qty"/>
    <field name="date" sort="asc"/>
</tree>
""", 'action': {'print_barcode': 'Print'}})

view.add({'model': 'stock.pack', 'mode': 'form', 'string': False, 'arch': """
<form>
    <header>
        <button name="print_barcode" string="Print"/>
    </header>
    <sheet>
        <group>
            <field name="name"/>
            <field name="order_id"/>
            <field name="article"/>
            <field name="size"/>
        </group>
        <group>
            <field name="bucket" string="Rack"/>
            <field name="category_id"/>
            <field name="level"/>
            <field name="available_qty"/>
        </group>
        <group title="Product" invisible="active_id.env.context.is_add_pack != true">
            <field name="adidas_product_id"/>
        </group>
        <group invisible="active_id.env.context.is_add_pack != true">
            <field name="adidas_product_qty"/>
        </group>
        <group title="Movements" width="100%" invisible="active_id.env.context.is_add_pack == true">
            <field name="move_ids">
                <tree>
                    <field name="product_id"/>
                    <field name="product_qty"/>
                    <field name="location_src_id"/>
                    <field name="location_dest_id"/>
                </tree>
            </field>
        </group>
    </sheet>
</form>
"""})
