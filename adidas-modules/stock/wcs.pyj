import orm.models as models
import orm.fields as fields
import orm.tools as tools
import orm.api as api
from ir.ui import menu, view

class WcsJob(models.Model):
    _name = 'wcs.job'

    def _get_job_number(self):
        return self.env['wcs.job'].with_context(order='name desc', limit=1).search(['name', '!=', False]).then(
        def (job_id):
            if job_id.length > 0:
               name = 'Job ' + str.zfill((parseInt(job_id.name.split(' ')[1]) + 1).toString(), 3)
               return name
            return 'Job 001'
        )

    name = fields.Char(string="Job Number", defaults=_get_job_number, required=True)
    date = fields.Datetime(string="Date", required=True)
    state = fields.Selection(['draft', 'Draft'], ['submitted', 'Submitted'], ['returned', 'Returned'], string="Status", defaults='draft')
    bucket = fields.Selection(*[[str(index + 1), 'Bucket ' + (index + 1)] for index in range(34)], string="Bucket", required=True)
    workface = fields.Selection(*[[str(index), str(index)] for index in range(5)], string="Workface", defaults='0', required=True)
    type = fields.Selection(['picking', 'Picking'], ['putting', 'Putting'], string="Type", required=True)
    flag = fields.Selection(['online', 'Online'], ['offline', 'Offline'], string="Flag", defaults='online', required=True)
    priority = fields.Integer(string="Priority", defaults=1)
    homepoint = fields.Integer(string="Homepoint")

    @api.strict
    def get_agv_status(self):
        requests = require('request-promise-native')
        return requests.post({'url': 'http://localhost:8080/wcs/agv/query', 'body': JSON.stringify({'warehouseId': '60001'}), 'headers': {'Content-Type': 'application/json'}}).then(JSON.parse)

    @api.strict
    def submit(self):
        requests = require('request-promise-native')
        return requests.post({'url': 'http://localhost:8080/wcs/bucket/query', 'body': JSON.stringify({'warehouseId': '60001', 'bucketCodeList': [str(index + 1) for index in range(34)]}), 'headers': {'Content-Type': 'application/json'}}).then(
        def (result):
            buckets = JSON.parse(result).bucketBOList
            bucket_object = None
            for bucket in buckets:
                if bucket.bucketId == self.bucket:
                   bucket_object = bucket
                   break
            if bucket_object:
               coordinate = None
               if self.type == 'putting':
                  coordinate = 35 * 65536 + 22
               elif self.type == 'picking':
                  coordinate = 20 * 65536 + 22
               request = requests.post({'url': 'http://localhost:8080/wcs/robot/job/submit', 'body': JSON.stringify({'robotJobId': 'RJI_' + self.id, 'warehouseId': '60001', 'bucketId': self.bucket, 'workFace': self.workface, 'endPoint': coordinate.toString(), 'letDownFlag': self.flag, 'jobPriority': self.priority.toString()}), 'headers': {'Content-Type': 'application/json'}})
               return request.then(
               def (result):
                   result = JSON.parse(result)
                   if result.receiveState != 'success':
                      raise Exception(result.message)
                   return self.write({'state': 'submitted', 'homepoint': bucket_object.homePoint})
               )
        )

    @api.strict
    def return_bucket(self):
        requests = require('request-promise-native')
        return requests.post({'url': 'http://localhost:8080/wcs/robot/job/submit', 'body': JSON.stringify({'robotJobId': 'RJI_RET' + self.id, 'warehouseId': '60001', 'bucketId': self.bucket, 'workFace': '0', 'endPoint': self.homepoint.toString(), 'letDownFlag': 'offline', 'jobPriority': self.priority.toString()}), 'headers': {'Content-Type': 'application/json'}}).then(
        def (result):
            result = JSON.parse(result)
            if result.receiveState != 'success':
               raise Exception(result.message)
            return self.write({'state': 'returned'})
        )

WcsJob()

menu.add({'id': 'job', 'parent': 'stock', 'string': 'Job', 'model': 'wcs.job', 'sequence': 2})
menu.add({'id': 'agv', 'parent': 'stock', 'string': 'AGV', 'model': 'wcs.job', 'sequence': 2, 'view_id': 'wcs.job.agv'})

view.add({'model': 'wcs.job', 'mode': 'tree', 'string': False, 'arch': """
<tree>
    <field name="name"/>
    <field name="date"/>
    <field name="type"/>
    <field name="bucket"/>
</tree>
"""})

view.add({'model': 'wcs.job', 'mode': 'form', 'string': False, 'arch': """
<form>
    <header>
        <button name="submit" string="Submit" invisible="active_id.state != 'draft'"/>
        <button name="return_bucket" string="Return" invisible="active_id.state != 'confirmed'"/>
        <field name="state" widget="statusbar"/>
    </header>
    <sheet>
        <group>
            <field name="name" readonly="active_id.state != 'draft'"/>
            <field name="bucket" readonly="active_id.state != 'draft'"/>
            <field name="workface"/>
            <field name="priority" readonly="active_id.state != 'draft'"/>
        </group>
        <group>
            <field name="date" readonly="active_id.state != 'draft'"/>
            <field name="type" readonly="active_id.state != 'draft'"/>
            <field name="flag" readonly="active_id.state != 'draft'"/>
        </group>
    </sheet>
</form>
"""})

view.add({'model': 'wcs.job', 'mode': 'agv', 'string': False, 'arch': """
<page title="AGV Status">
    <iframe width="100%" height="100%" frameborder="0" src="dashboard/"/>
</page>
"""})
