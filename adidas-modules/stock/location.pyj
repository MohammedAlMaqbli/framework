import orm.models as models
import orm.fields as fields
import orm.api as api
from ir.ui import menu, view
from ir.data import data

defaults = {}

class StockLocation(models.Model):
    _name = 'stock.location'

    defaults = defaults

    name = fields.Char(string="Location Name", required=True)
    code = fields.Char(string="Code")
    type = fields.Selection(['vendor', 'Vendor'], ['customer', 'Customer'], ['internal', 'Internal'], string="Location Type", required=True)

StockLocation()

menu.add({'id': 'location', 'parent': 'stock', 'string': 'Locations', 'model': 'stock.location', 'sequence': 15})

view.add({'model': 'stock.location', 'mode': 'tree', 'string': False, 'arch': """
<tree>
    <field name="name"/>
    <field name="type"/>
</tree>
"""})

view.add({'model': 'stock.location', 'mode': 'form', 'string': False, 'arch': """
<form>
    <sheet>
        <group>
            <field name="name"/>
            <field name="code"/>
        </group>
        <group>
            <field name="type"/>
        </group>
    </sheet>
</form>
"""})

def create_locations():
    internal = models.env['stock.location'].with_context(limit=1).search(['code', '=', 'INT'])
    external = models.env['stock.location'].with_context(limit=1).search(['code', '=', 'EXT'])
    return Promise.all([internal, external]).then(
    def (result):
        promises = []
        internal_id, external_id = result
        if internal_id.length:
           defaults.internal_id = internal_id.ids[0]
        else:
           promises.push(models.env['stock.location'].create({'name': 'Internal', 'type': 'internal', 'code': 'INT'}))
        if external_id.length:
           defaults.external_id = external_id.ids[0]
        else:
           promises.push(models.env['stock.location'].create({'name': 'External', 'type': 'internal', 'code': 'EXT'}))
        if promises.length:
           return Promise.all(promises).then(
           def (result):
               defaults.internal_id, defaults.external_id = [record.id for record in result]
           )
    )

data.append(create_locations)
