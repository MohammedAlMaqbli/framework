@async
def get_jasper_report(report, parameters, format='pdf', server=['https://jasper.odooabc.com/jasperserver'], username='c0b4d1b4c4', password='c0b4d1r4b4'):
    if Array.isArray(server):
       if '172' in window.location.href and server.length == 1:
          for ip in ['172.16.2.22', '172.16.2.21']:
              server.unshift('http://' + ip + '/jasperserver')
       errors = []
       for host in server:
           try:
               url = await [get_jasper_report(report=report, parameters=parameters, format=format, server=host, username=username, password=password)]
               return url
           except Exception as error:
               errors.push(error)
       raise errors[-2]
    jasper_parameters = []
    for key in parameters:
        jasper_parameters.push({'name': key, 'value': [parameters[key]]})
    request = await [fetch(server + '/rest_v2/reportExecutions', {'credentials': 'include', 'method': 'POST', 'headers': {'Authorization': 'Basic ' + btoa(username + ':' + password), 'Content-Type': 'application/json'}, 'body': JSON.stringify({'reportUnitUri': report, 'outputFormat': format, 'parameters': {'reportParameter': jasper_parameters}})})]
    text = await [request.text()]
    xml = new DOMParser().parseFromString(text, 'text/xml')
    request_id, export_id = xml.querySelector('requestId').innerHTML, xml.querySelector('export').querySelector('id').innerHTML
    url = server + '/rest_v2/reportExecutions/' + request_id + '/exports/' + export_id + '/outputResource'
    return url
