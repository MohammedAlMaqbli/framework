import orm.models as models
import orm.fields as fields
import orm.tools as tools
import orm.api as api
from ir.ui import menu, view

class StockMove(models.Model):
    _name = 'stock.move'

    def _get_picking_context(self):
         if v'typeof window' != 'undefined':
            return window.models.env.context.default_picking_id or None

    name = fields.Char(string="Move")
    date = fields.Datetime(string="Date", defaults=tools.date.now, index=True)
    product_id = fields.Many2one('product.product', string="Product", required=True, index=True)
    product_qty = fields.Float(string="Quantity")
    location_src_id = fields.Many2one('stock.location', string="Source Location", index=True)
    location_dest_id = fields.Many2one('stock.location', string="Destination Location", index=True)
    picking_id = fields.Many2one('stock.picking', string="Operation", defaults=_get_picking_context)
    pack_id = fields.Many2one('stock.pack', string="Pack/Box", index=True)
    trolley_id = fields.Many2one('stock.trolley', string="Trolley")
    trolley_type_id = fields.Many2one('stock.trolley.type', string="Trolley Type")
    state = fields.Selection(['draft', 'Draft'], ['confirmed', 'Confirmed'], ['validated', 'Validated'], string="Status", defaults='draft')

    def create(self, values=False, is_client=tools.configuration.client):
        promises = []
        if v"typeof window === 'undefined'":
           value = values if Array.isArray(values) else [values]
           for object in value:
               if object.picking_id:
                  picking = self.env['stock.picking'].browse(object.picking_id).then(
                  def (picking_id):
                      object.location_src_id = picking_id.location_src_id
                      object.location_dest_id = picking_id.location_dest_id
                  )
                  promises.push(picking)
               if object.product_id:
                  product = self.env['product.product'].browse(object.product_id).then(
                  def (product_id):
                      object.name = product_id.name + ' ' + object.date
                  )
                  promises.push(product)
        return Promise.all(promises).then(
        def ():
            return self.__super__('create')(values=values, is_client=is_client)
        )

    def write(self, values=False, is_client=tools.configuration.client):
        promises = []
        if v"typeof window === 'undefined'":
           value = values if Array.isArray(values) else [values]
           for object in value:
               if object.picking_id:
                  promise = self.env['stock.picking'].browse(object.picking_id).then(
                  def (picking_id):
                      object.location_src_id = picking_id.location_src_id
                      object.location_dest_id = picking_id.location_dest_id
                  )
                  promises.push(promise)
               if object.product_id:
                  product = self.env['product.product'].browse(object.product_id).then(
                  def (product_id):
                      object.name = product_id.name + ' ' + object.date
                  )
                  promises.push(product)
        return Promise.all(promises).then(
        def ():
            return self.__super__('write')(values=values, is_client=is_client)
        )

    @api.onchange('pack_id')
    def onchange_pack(self):
        if not self.pack_id: return
        return self.env['stock.pack'].browse(self.pack_id).then(
        def (pack_id):
            if pack_id.product_id: self.product_id = pack_id.product_id
        )

StockMove()

menu.add({'id': 'stock', 'string': 'Inventory', 'sequence': 20})
menu.add({'id': 'move', 'parent': 'stock', 'string': 'Movement', 'model': 'stock.move', 'sequence': 5})
menu.add(id='historical', string='Historical Data', sequence=30)

view.add({'model': 'stock.move', 'mode': 'tree', 'string': False, 'arch': """
<tree domain="context.location ? ['location_dest_id', '=', models.env['stock.location'].location_defaults[context.location]] : []">
    <field name="product_id"/>
    <field name="product_qty"/>
    <field name="date"/>
    <field name="location_src_id"/>
    <field name="location_dest_id"/>
</tree>
"""})

view.add({'model': 'stock.move', 'mode': 'form', 'string': False, 'arch': """
<form>
    <sheet>
        <group>
            <field name="product_id"/>
            <field name="picking_id"/>
        </group>
        <group>
            <field name="product_qty"/>
            <field name="pack_id" domain="['id', 'in', active_id.env.context.active_pack_ids || null]"/>
        </group>
    </sheet>
</form>
"""})

menu.add(id='stock_movement', string='Stock', sequence=21)
menu.add(id='stock_lc', parent='stock_movement', string='LC', model='stock.move', view_id='stock.move.tree_lc', sequence=1)
menu.add(id='stock_scr', parent='stock_movement', string='SCR', model='stock.move', view_id='stock.move.tree_scr', sequence=2)
menu.add(id='stock_assy', parent='stock_movement', string='ASSY', model='stock.move', view_id='stock.move.tree_assy', sequence=3)

view.add(model='stock.move', mode='tree_lc', arch="""
<tree-page title="Stock LC"/>
""", context={'location': 'internal_id'})

view.add(model='stock.move', mode='tree_scr', arch="""
<tree-page title="Stock SCR"/>
""", context={'location': 'scr_id'})

view.add(model='stock.move', mode='tree_assy', arch="""
<tree-page title="Stock ASSY"/>
""", context={'location': 'assy_id'})


class StockAdjust(models.Model):
    _name = 'stock.adjust'

    pack_id = fields.Many2one('stock.pack', string="Pack to Move", required=True)
    quantity = fields.Float(string="Quantity")
    location_id = fields.Many2one('stock.location', string="Destination", required=True)
    scan = fields.Char(string="Scan")

    @api.onchange('scan', async=True)
    def onchange_scan(self):
        if not self.scan: return
        value = JSON.parse(self.scan)
        pack_id = await [self.env['stock.pack'].search(['order_pack_id', '=', value.id])]
        self.pack_id = pack_id
        self.scan = ''

    @async
    def adjust(self):
        pack_id = await [self.env['stock.pack'].browse(self.pack_id)]
        location_src_id = pack_id.location_id
        order_pack_id = pack_id.order_pack_id
        pack_id.write({'order_pack_id': None})
        pack_id = await [self.env['stock.pack'].create({'name': pack_id.name, 'product_id': pack_id.product_id, 'product_qty': self.quantity, 'location_id': self.location_id, 'is_pulley': pack_id.is_pulley})]
        return self.env['stock.move'].create({'pack_id': pack_id.id, 'product_id': pack_id.product_id, 'product_qty': pack_id.product_qty, 'location_src_id': location_src_id, 'location_dest_id': pack_id.location_id})

StockAdjust()

menu.add(id='stock_adjust', parent='stock_movement', string='Adjust', model='stock.adjust', view_id='stock.adjust.wizard', sequence=10)

view.add(model='stock.adjust', mode='wizard', arch="""
<form>
    <sheet>
        <group>
            <field name="pack_id"/>
            <scanner-field name="scan"/>
        </group>
        <group>
            <field name="quantity"/>
            <field name="location_id"/>
        </group>
    </sheet>
</form>
""")
