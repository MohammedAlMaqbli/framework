import orm.models as models
import orm.fields as fields
import orm.tools as tools
import orm.api as api
import stock.move
from orm.tools import each, exist
from stock.wcs import WcsJob
from product.category import categories, defaults as category_default
from stock.location import defaults as location_default
from ir.ui import menu, view
from ir.sequence import add_sequence

add_sequence('agv.checkpoint')

class AgvCheckpoint(models.Model):
    _name = 'agv.checkpoint'

    name = fields.Char(string="Name")
    agv = fields.Char(string="AGV IP Address")
    daisha = fields.Char(string="Daisha")
    location_id = fields.Many2one('stock.location', string="Location")
    date = fields.Datetime(string="Date", defaults=tools.date.now)

    @async
    def create(self, values=False, is_client=tools.configuration.client):
        if v'typeof window' != 'undefined': return self.__super__('create')(values=values, is_client=is_client)
        values = values if exist(values) else self.values
        for value in each(values):
            sequence = await (self.env['ir.sequence'].get_next('agv.checkpoint'))
            value.name = 'Checkpoint ' + str.zfill(sequence.toString(), 3)
        return self.__super__('create')(values=values, is_client=is_client)

    @api.server(async=True)
    def receive_rfid(self, ip, epc):
        rfid_id = await [self.env['agv.rfid'].search(['name', '=', ip])]
        return self.create({'agv': ip, 'daisha': epc, 'location_id': rfid_id.location_id})

AgvCheckpoint()

menu.add(id='agv_chasun', string="AGV", sequence=7)
menu.add(id='checkpoint', parent='agv_chasun', model='agv.checkpoint', string="Checkpoint", sequence=1)

view.add(model='agv.checkpoint', mode='tree', arch="""
<tree>
    <field name="name"/>
    <field name="daisha"/>
    <field name="location_id"/>
</tree>
""")

view.add(model='agv.checkpoint', mode='form', arch="""
<form>
    <sheet>
        <group>
            <field name="daisha"/>
            <field name="date"/>
        </group>
        <group>
            <field name="location_id"/>
        </group>
    </sheet>
</form>
""")

class AgvRoute(models.Model):
    _name = 'agv.route'

    name = fields.Char(string="Route", index=True)
    fitting = fields.Char(string="Fitting Type", index=True)
    picking_zone = fields.Char(string="Picking Zone", index=True)

AgvRoute()

menu.add(id='routes', parent='agv_chasun', model='agv.route', string="Routes", sequence=2)

view.add(model='agv.route', mode='tree', arch="""
<tree>
    <field name="name"/>
    <field name="fitting"/>
    <field name="picking_zone"/>
</tree>
""")

class AgvRFID(models.Model):
    _name = 'agv.rfid'

    name = fields.Char(string="IP Address", required=True, index=True)
    location_id = fields.Many2one('stock.location', string="Location")

AgvRFID()

menu.add(id='rfid', parent='agv_chasun', model='agv.rfid', string="RFID Location", sequence=3)

view.add(model='agv.rfid', mode='tree', arch="""
<tree>
    <field name="name"/>
    <field name="location_id"/>
</tree>
""")

view.add(model='agv.rfid', mode='form', arch="""
<form>
    <sheet>
        <group>
            <field name="name"/>
        </group>
        <group>
            <field name="location_id"/>
        </group>
    </sheet>
</form>
""")


pack = {}
sequence = {}
add_sequence('stock.pack', sequence)

class StockPack(models.Model):
    _name = 'stock.pack'

    @api.server
    def _get_pack_number_server(self, last_pack):
        def update_sequence(pack_id):
            sequence_id = this
            if pack_id:
               if pack_id.length and pack_id.name:
                  sequence_id.write({'sequence': parseInt(pack_id.name.split(' ')[1])}).then(
                  def (): pack.updated = True
                  )
               name = pack_id.name if pack_id.length and pack_id.name else 'Pack 000'
               if last_pack and type(last_pack) == String:
                  name = tools.max(name, last_pack) or last_pack or 'Pack 000'
               name = 'Pack ' + str.zfill((parseInt(name.split(' ')[1]) + 1).toString(), 3)
               return name
        return self.env['ir.sequence'].browse(sequence['stock.pack']).then(
        def (sequence_id):
            name = 'Pack ' + str.zfill(str(sequence_id.sequence or 0), 3)
            #if sequence_id.length and not last_pack:
            #   return self.env['stock.pack'].with_context(order='name desc', limit=1).search().then(update_sequence.bind(sequence_id))
            if last_pack and type(last_pack) == String:
               name = tools.max(name, last_pack) or last_pack or 'Pack 000'
            name = 'Pack ' + str.zfill((parseInt(name.split(' ')[1]) + 1).toString(), 3)
            return name
        )

    @async
    def _get_pack_number(self):
        number_server = self._get_pack_number_server(pack.last_pack if tools.exist(pack.last_pack) else None)
        result = await (number_server)
        pack.last_pack = result
        return result

    #@api.server
    def _get_current_qty(self):
        if not self.id: return 0.0
        def compute_qty(move_ids):
            qty = 0.0
            for move_id in move_ids:
                qty += move_id.product_qty if move_id.location_dest_id == location_default.internal_id else -move_id.product_qty
            return qty
        #if self.env.context.date_from_historical and self.env.context.date_to_historical:
        #   return self.env['stock.move'].search(['date', '<=', self.env.context.date_to_historical]).then(compute_qty)
        return self.env['stock.move'].browse(self.move_ids).then(compute_qty)

    name = fields.Char(string="Pack Number", defaults=_get_pack_number, required=True, index=True)
    date = fields.Datetime(string="Date", defaults=tools.date.now, index=True)
    location_id = fields.Many2one('stock.location', string="Current Location")
    trolley_id = fields.Many2one('stock.trolley', string="Trolley")
    trolley_type_id = fields.Many2one('stock.trolley.type', string="Trolley Type")
    order_pack_id = fields.Many2one('purchase.order.pack', string="Purchase Order", index=True)
    move_ids = fields.One2many('stock.move', 'pack_id', string="Movements")
    category_id = fields.Many2one('product.category', string="Category")
    product_id = fields.Many2one('product.product', string="Product", index=True)
    product_qty = fields.Float(string="Quantity", index=True)
    available_qty = fields.Float(string="Available Quantity", index=True)
    #available_qty = fields.Float(string="Available Quantity", compute=_get_available_qty)
    #current_qty = fields.Float(string="Stock", compute=_get_current_qty, store=False)

    """def create(self, values=False, is_client=tools.configuration.client):
        if v"typeof window !== 'undefined'":
           for record in self:
               if record.product_qty and record.product_qty > record.values.available_qty:
                  if tools.dialog: tools.dialog.alert('Quantity Insufficient')
                  raise Error('Quantity is Insufficient')
        return self.__super__('create')(values=values, is_client=is_client).then(
        def ():
            promises = []
            for record in self:
                promise = self.env['stock.move'].create({'picking_id': record.picking_id.id, 'pack_id': record.id, 'product_id': record.product_id, 'product_qty': record.product_qty})
                promises.push(promise)
            return Promise.all(promises).then(
            def (records): return self
            )
        )"""

    #@async
    def create(self, values=False, is_client=tools.configuration.client):
        result = (self.__super__('create')(values=values, is_client=is_client))
        if v'typeof window' == 'undefined':
           self.env['ir.sequence'].browse(sequence['stock.pack']).then(
           def (sequence_id):
               sequence = 0
               for record in tools.each(values):
                   number = parseInt(record.name.split(' ')[1])
                   if number > sequence: sequence = number
               if sequence > sequence_id.sequence: (sequence_id.write({'sequence': sequence + 1}))
           )
        return result

    def print_barcode(self):
        if v'typeof window' != 'undefined' and window.printBarcode:
           for record in self: printBarcode(record.name)
           #self.read(format=True).then(
           #def (values):
           #    for record in values: printBarcode(record.name)
           #)

    @api.onchange('product_id', async=True)
    def onchange_product(self):
        if not self.product_id: return
        if self.category_id: return
        product_id = await (self.env['product.product'].browse(self.product_id))
        if not self.category_id: self.category_id = product_id.category_id

StockPack()

menu.add({'id': 'pack', 'parent': 'stock', 'string': 'Packs', 'model': 'stock.pack', 'sequence': 6})
menu.add({'id': 'pack_historical', 'parent': 'historical', 'string': 'Existing Packs', 'model': 'stock.pack', 'sequence': 3})

last_args = None

view.add({'model': 'stock.pack', 'mode': 'tree', 'string': False, 'arch': """
<tree domain="(context.date_from_historical ? [] : ['disposed', '!=', True])">
    <field name="name"/>
    <!--<field name="order_id"/>-->
    <field name="category_id"/>
    <field name="product_qty"/>
    <field name="date" sort="asc"/>
</tree>
""", 'action': {'print_barcode': 'Print', 'dispose': 'Dispose'}})

view.add({'model': 'stock.pack', 'mode': 'form', 'string': False, 'arch': """
<form>
    <header>
        <button name="print_barcode" string="Print"/>
    </header>
    <sheet>
        <group>
            <field name="name"/>
        </group>
        <group>
            <field name="category_id"/>
        </group>
        <group title="Product" invisible="active_id.env.context.is_add_pack != true">
            <field name="product_id"/>
        </group>
        <group invisible="active_id.env.context.is_add_pack != true">
            <field name="product_qty"/>
        </group>
        <group title="Movements" width="100%" invisible="active_id.env.context.is_add_pack == true">
            <field name="move_ids">
                <tree>
                    <field name="product_id"/>
                    <field name="product_qty"/>
                    <field name="location_src_id"/>
                    <field name="location_dest_id"/>
                </tree>
            </field>
        </group>
    </sheet>
</form>
"""})

class HistoricalData(models.Model):
    _name = 'historical.data'

    date_from = fields.Datetime(string="Date From", required=True)
    date_to = fields.Datetime(string="Date To", required=True)
    view = fields.Selection(['stock.move.picking', "Picking"], ['stock.move.putting', 'Putting'], ['stock.pack', 'Packs'], ['stock.move', 'Moves'], string="Data", required=True)

    def show(self):
        domain = [['date', '<=', self.date_to]]
        if self.view != 'stock.pack': domain = [['date', '>=', self.date_from]].concat(domain)
        view = self.view
        if self.view == 'stock.move.picking':
           view = 'stock.move'
           domain = domain.concat([['location_dest_id', 'in', [location_default.external_id]]])
        elif self.view == 'stock.move.putting':
           view = 'stock.move'
           domain = domain.concat([['location_src_id', 'in', [location_default.external_id]]])
        #self.env.context.date_from_historical = self.date_from
        #self.env.context.date_to_historical = self.date_to
        tools.navigate(('/tree/' if self.view else '/view/') + view + '?domain=' + encodeURIComponent(JSON.stringify(domain)))

HistoricalData()

menu.add(id='historical_by_date', parent='historical', model='historical.data', view_id='historical.data.filter', string="Filter by Date", sequence=10)

view.add(model='historical.data', mode='filter', arch="""
<form>
    <sheet>
        <group>
            <field name="date_from"/>
            <field name="view"/>
        </group>
        <group>
            <field name="date_to"/>
        </group>
        <group>
            <button name="show" string="Show"/>
        </group>
    </sheet>
</form>
""")
