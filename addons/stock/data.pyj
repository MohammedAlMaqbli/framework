import orm.models as models
import orm.fields as fields
import orm.tools as tools
import orm.api as api
from ir.ui import menu, view
from ir.sequence import add_sequence
from stock.location import defaults as location_defaults

class HPPMPo(models.Model):
    _name = 'hppm.po'

    name = fields.Char(string="PO Number")
    product_id = fields.Many2one('product.product', string="Part")
    product_qty = fields.Float(string="Quantity")
    vendor = fields.Char(string="Vendor")

    @async
    def create(self, values=False, is_client=tools.configuration.client):
        if v'typeof window' != 'undefined': return self.__super__('create')(values=values, is_client=is_client)
        values = values if tools.exist(values) else self.values
        for value in tools.each(values):
            sequence = await (self.env['ir.sequence'].get_next('hppm.po'))
            value.name = 'PO ' + str.zfill(sequence.toString(), 3)
        result = await (self.__super__('create')(values=values, is_client=is_client))
        return result

    def print_barcode(self):
        window.printBarcode(self.name)

    @async
    def receive(self):
        pack_id = await (self.env['stock.pack'].create({'adidas_product_id': self.product_id, 'adidas_product_qty': self.product_qty, 'bucket': '1'}))
        picking_id = await (self.env['stock.picking'].create({'location_src_id': location_defaults.external_id, 'location_dest_id': location_defaults.internal_id, 'type': 'putting', 'pack_ids': pack_id.ids}))
        tools.navigate('/form/stock.picking?id=' + picking_id.id)

HPPMPo()

add_sequence('hppm.po')

menu.add({'id': 'hppm_data', 'string': 'Data', 'sequence': 25})

menu.add({'id': 'hppm_po', 'parent': 'hppm_data', 'string': 'PO', 'model': 'hppm.po', 'sequence': 2})

view.add({'model': 'hppm.po', 'mode': 'tree', 'string': False, 'arch': """
<tree>
    <field name="name"/>
    <field name="product_id"/>
    <field name="product_qty"/>
    <field name="vendor"/>
</tree>
"""})

view.add({'model': 'hppm.po', 'mode': 'form', 'string': False, 'arch': """
<form>
    <header>
        <button name="print_barcode" string="Print"/>
        <button name="receive" string="Receive"/>
    </header>
    <sheet>
        <group>
            <field name="name"/>
            <field name="product_id"/>
        </group>
        <group>
            <field name="vendor"/>
            <field name="product_qty"/>
        </group>
    </sheet>
</form>
"""})

class HPPMData(models.Model):
    _name = 'hppm.data'

    @api.server
    def _get_number(self):
        return self.env['hppm.data'].with_context(order='name desc', limit=1).search(['name', '!=', False]).then(
        def (data_id):
            if data_id.length > 0:
               name = 'Data ' + str.zfill((parseInt(data_id.name.split(' ')[1]) + 1).toString(), 3)
               return name
            return 'Data 001'
        )

    name = fields.Char(string="Data Number", defaults=_get_number, required=True)
    date = fields.Datetime(string="Date", defaults=tools.date.now)
    excel = fields.Binary(string="Excel Data", required=True)
    imported = fields.Boolean(string="Imported")
    type = fields.Selection(['bom', 'BoM'], ['sequence', 'Sequence'], ['po', 'PO'], string="Type", required=True)

    @api.server
    def import_data(self):
        if self.type == 'po': return self.import_po()
        if self.type == 'bom': return self.import_bom()
        if self.type == 'sequence': return self.import_sequence()

    @api.server(async=True)
    def import_bom(self):
        promises = []
        xlsx = require('node-xlsx')
        sheet = xlsx.parse(tools.atob(self.excel, buffer=True))[1]
        row = -1
        models_code = {}
        models = {}
        parts = {}
        @async
        def check_part(value):
            product_id = await (self.env['product.product'].search(['code', '=', value.code]))
            if not product_id.length:
               product_id = await (self.env['product.product'].create(value))
            parts[value.code] = product_id
        for data in sheet.data:
            row += 1
            if row < 11: continue
            #if not data[0]: continue
            value = {'name': data[3], 'code': data[1]}
            if not value.name or not value.code: continue
            cell_index = -1
            for cell in data:
                cell_index += 1
                if cell_index < 6: continue
                if not cell or cell == '-': continue
                model = [sheet.data[index][cell_index] for index in range(5, 9)].join(' ')
                code = sheet.data[9][cell_index]
                if not models[model]: models[model] = {}
                models[model][value.code] = cell
                models_code[model] = code
            promise = check_part(value)
            promises.push(promise)
        await (promises)
        promises = []
        @async
        def create_bom_line(bom_id, part, qty):
            product_id = parts[part]
            bom_line_id = await (self.env['mrp.bom.line'].search(['bom_id', '=', bom_id.id], ['product_id', '=', product_id.id]))
            if not bom_line_id.length:
               bom_line_id = await (self.env['mrp.bom.line'].create({'product_id': product_id.id, 'product_qty': qty, 'bom_id': bom_id.id}))
               return
            if bom_line_id.product_qty != qty: return bom_line_id.write({'product_qty': qty})
        @async
        def create_model(model, parts):
            code = models_code[model]
            promises = []
            product_id = await (self.env['product.product'].search(['code', '=', code]))
            if not product_id.length:
               product_id = await (self.env['product.product'].create({'name': model, 'code': code}))
            bom_id = await (self.env['mrp.bom'].search(['product_id', '=', product_id.id]))
            if not bom_id.length:
               bom_id = await (self.env['mrp.bom'].create({'name': model, 'product_id': product_id.id}))
            for part in parts:
                promises.push(create_bom_line(bom_id, part, parts[part]))
            return Promise.all(promises)
        for model in models:
            promises.push(create_model(model, models[model]))
        await (promises)
        return self.write({'imported': True})

    @api.server(async=True)
    def import_sequence(self):
        promises = []
        xlsx = require('node-xlsx')
        sheet = xlsx.parse(tools.atob(self.excel, buffer=True))[0]
        row = -1
        @async
        def create_picking_list(code, quantity):
            product_id = await (self.env['product.product'].search(['code', '=', code]))
            bom_id = await (self.env['mrp.bom'].search(['product_id', '=', product_id.id]))
            bom_line_ids, list_id = await ([self.env['mrp.bom.line'].browse(bom_id.line_ids), self.env['stock.picking.list'].create({'model_id': bom_id.id})])
            promises = []
            routes = {index: 0 for index in range(1, 6)}
            for bom_line_id in bom_line_ids:
                selected_route = None
                for route in range(1, 6):
                    if routes[route] < parseInt(bom_line_ids.length / 5):
                       selected_route = route
                       routes[route] += 1
                       break
                if not selected_route:
                   route = any(routes[route] <= parseInt(bom_line_ids.length / 5) and route for route in range(1, 6))
                   if route: selected_route = route
                   else: selected_route = 1
                line_qty = bom_line_id.product_qty * quantity
                promise = self.env['stock.picking.list.line'].create({'route': route, 'product_id': bom_line_id.product_id, 'product_qty': line_qty, 'qty_box': line_qty, 'box': 1, 'picking_list_id': list_id.id})
                promises.push(promise)
            return await (promises)
        for data in sheet.data:
            row += 1
            if row < 6: continue
            if not data[0]: continue
            promise = create_picking_list(data[3], data[2])
            promises.push(promise)
        await (promises)
        return self.write({'imported': True})

    @api.server
    def import_po(self):
        promises = []
        xlsx = require('node-xlsx')
        sheet = xlsx.parse(tools.atob(self.excel, buffer=True))[0]
        row = -1
        @async
        def create_po(value):
            product_id = await (self.env['product.product'].search(['code', '=', value.part]))
            if not product_id.length: return
            return self.env['hppm.po'].create({'product_id': product_id.id, 'product_qty': value.quantity, 'vendor': value.vendor})
        for data in sheet.data:
            row += 1
            if row < 1: continue
            #if not data[0]: continue
            value = {'part': data[0], 'quantity': data[1], 'vendor': data[2]}
            promises.push(create_po(value))
        return Promise.all(promises)

HPPMData()

menu.add({'id': 'import_data', 'parent': 'hppm_data', 'string': 'Import', 'model': 'hppm.data', 'sequence': 1})

view.add({'model': 'hppm.data', 'mode': 'tree', 'string': False, 'arch': """
<tree>
    <field name="name"/>
    <field name="date"/>
</tree>
"""})

view.add({'model': 'hppm.data', 'mode': 'form', 'string': False, 'arch': """
<form>
    <header>
        <button name="import_data" string="Import" invisible="active_id.imported == True"/>
    </header>
    <sheet>
        <group>
            <field name="name"/>
            <field name="excel"/>
        </group>
        <group>
            <field name="date"/>
            <field name="type"/>
            <field name="imported" readonly="True"/>
        </group>
    </sheet>
</form>
"""})
