import orm.models as models
import orm.fields as fields
import orm.tools as tools
import orm.api as api
from ir.ui import menu, view
from ir.sequence import add_sequence
from stock.location import defaults as location_defaults
from jasper.report import get_jasper_report

class HPPMPo(models.Model):
    _name = 'purchase.order'

    name = fields.Char(string="PO Number")
    product_id = fields.Many2one('product.product', string="Part")
    product_qty = fields.Float(string="Quantity")
    vendor = fields.Char(string="Vendor")
    received = fields.Boolean(string="Received")

    @async
    def create(self, values=False, is_client=tools.configuration.client):
        if v'typeof window' != 'undefined': return self.__super__('create')(values=values, is_client=is_client)
        values = values if tools.exist(values) else self.values
        for value in tools.each(values):
            sequence = await (self.env['ir.sequence'].get_next('purchase.order'))
            value.name = 'PO ' + (value.vendor + ' ' if value.vendor else '') + str.zfill(sequence.toString(), 3)
        result = await (self.__super__('create')(values=values, is_client=is_client))
        return result

    def print_barcode(self):
        if v'typeof window' != 'undefined' and window.printBarcode:
           for record in self: printBarcode(record.name)

    @async
    def print_po(self):
     try:
        values = await [self.read(format=True, without_null=True, relational_fields=['product_id'])]
        url = await [get_jasper_report('/Solu/HPPM/Purchase_Order', {'data': JSON.stringify(values)})]
        window.open(url)
     except Exception as error:
        alert(error.stack or error.message)

    @async
    def receive(self):
        pack_ids = []
        for record in self:
            if record.received: return tools.alert('One of the PO is already received')
        for record in self:
            pack_id, order_id = await ([self.env['stock.pack'].create({'name': 'Pack ' + record.name.replace('PO ', ''), 'product_id': record.product_id, 'product_qty': record.product_qty}), record.write({'received': True})])
            pack_ids.push(pack_id.id)
        picking_id = await (self.env['stock.picking'].create({'location_src_id': location_defaults.external_id, 'location_dest_id': location_defaults.internal_id, 'type': 'putting', 'pack_ids': pack_ids}))
        tools.navigate('/form/stock.picking?id=' + picking_id.id)

HPPMPo()

add_sequence('purchase.order')

menu.add({'id': 'hppm_data', 'string': 'Data', 'sequence': 25})

menu.add({'id': 'hppm_po', 'parent': 'mrp_planning', 'string': 'Purchase Order', 'model': 'purchase.order', 'sequence': 3})

view.add({'model': 'purchase.order', 'mode': 'tree', 'string': False, 'arch': """
<tree>
    <field name="name"/>
    <field name="product_id"/>
    <field name="product_qty"/>
</tree>
""", 'action': {'print_po': 'Print'}})

view.add({'model': 'purchase.order', 'mode': 'form', 'string': False, 'arch': """
<form>
    <header>
        <button name="print_po" string="Print"/>
        <button name="receive" string="Receive" invisible="active_id.received == True"/>
    </header>
    <sheet>
        <group>
            <field name="name"/>
            <field name="product_id"/>
        </group>
        <group>
            <field name="vendor"/>
            <field name="product_qty"/>
        </group>
    </sheet>
</form>
"""})

class HPPMData(models.Model):
    _name = 'hppm.data'

    @api.server
    def _get_number(self):
        return self.env['hppm.data'].with_context(order='name desc', limit=1).search(['name', '!=', False]).then(
        def (data_id):
            if data_id.length > 0:
               name = 'Data ' + str.zfill((parseInt(data_id.name.split(' ')[1]) + 1).toString(), 3)
               return name
            return 'Data 001'
        )

    name = fields.Char(string="Data Number", defaults=_get_number, required=True)
    date = fields.Datetime(string="Date", defaults=tools.date.now)
    excel = fields.Binary(string="Excel Data", required=True, protect=True)
    imported = fields.Boolean(string="Imported")
    type = fields.Selection(['bom', 'BoM'], ['daisha', 'Daisha'], ['sequence', 'Sequence'], ['po', 'PO'], string="Type", required=True)

    @api.server
    def import_data(self):
        if self.type == 'po': return self.import_po()
        if self.type == 'bom': return self.import_bom()
        if self.type == 'daisha': return self.import_daisha()
        if self.type == 'sequence': return self.import_sequence()

    @api.server(async=True)
    def import_daisha(self):
        promises = []
        xlsx = require('node-xlsx')
        sheet = xlsx.parse(tools.atob(self.excel, buffer=True))[0]
        row = -1
        trolleys = {}
        trolley_map = {}
        trolley_type = None
        for data in sheet.data:
            row += 1
            if row < 4: continue
            #if not data[5] or data[5] == '-': continue
            part_code = data[4]
            part_qty = data[7]
            if data[21] and data[21] != trolley_type:
               if not trolley_type: trolley_type = data[21]
               else:
                   trolley_id = self.env['stock.trolley.type'].create({'name': trolley_type})
                   product_ids = await (self.env['product.product'].search(['code', 'in', Object.keys(trolleys[trolley_type])]))
                   trolley_id = await (trolley_id)
                   for product_id in product_ids:
                       product_id.trolley_type_id = trolley_id.id
                       product_id.qty_box = trolleys[trolley_type][product_id.code] or 0
                   await [product_ids.write()] #{'trolley_type_id': trolley_id.id})]
                   #trolley_map[trolley_type] = product_ids.ids
                   del trolleys[trolley_type]
                   trolley_type = data[21]
                   if not trolleys[trolley_type]: trolleys[trolley_type] = {}
                   if not data[5] or data[5] == '-': continue
                   trolleys[trolley_type][part_code] = part_qty
            elif trolley_type:
               if not trolleys[trolley_type]: trolleys[trolley_type] = {}
               if not data[5] or data[5] == '-': continue
               trolleys[trolley_type][part_code] = part_qty
        for trolley in trolleys:
            trolley_id = self.env['stock.trolley.type'].create({'name': trolley})
            product_ids = await (self.env['product.product'].search(['code', 'in', Object.keys(trolleys[trolley])]))
            trolley_id = await (trolley_id)
            await (product_ids.write({'trolley_type_id': trolley_id.id}))
            for product_id in product_ids:
                product_id.trolley_type_id = trolley_id.id
                product_id.qty_box = trolleys[trolley][product_id.code] or 0
            await [product_ids.write()] #{'trolley_type_id': trolley_id.id})]

    @api.server(async=True)
    def import_bom(self):
        promises = []
        xlsx = require('node-xlsx')
        sheet = xlsx.parse(tools.atob(self.excel, buffer=True))[1]
        row = -1
        models_code = {}
        models = {}
        parts = {}
        @async
        def check_part(value):
            product_id = await (self.env['product.product'].search(['code', '=', value.code]))
            if not product_id.length:
               product_id = await (self.env['product.product'].create(value))
            parts[value.code] = product_id
        for data in sheet.data:
            row += 1
            if row < 8: continue
            #if not data[0]: continue
            value = {'name': data[3], 'code': data[1]}
            if not value.name or not value.code: continue
            cell_index = -1
            for cell in data:
                cell_index += 1
                if cell_index < 6: continue
                if not cell or cell == '-': continue
                model = [sheet.data[index][cell_index] for index in range(2, 6)].join(' ')
                code = sheet.data[6][cell_index]
                if not models[model]: models[model] = {}
                models[model][value.code] = cell
                models_code[model] = code
            await (check_part(value))
            #promises.push(promise)
        #await (promises)
        #promises = []
        @async
        def create_bom_line(bom_id, part, qty):
            product_id = parts[part]
            bom_line_id = await (self.env['mrp.bom.line'].search(['bom_id', '=', bom_id.id], ['product_id', '=', product_id.id]))
            if not bom_line_id.length:
               bom_line_id = await (self.env['mrp.bom.line'].create({'product_id': product_id.id, 'product_qty': qty, 'bom_id': bom_id.id}))
               return
            if bom_line_id.product_qty != qty: return bom_line_id.write({'product_qty': qty})
        @async
        def create_model(model, parts):
            code = models_code[model]
            promises = []
            product_id = await (self.env['product.product'].search(['code', '=', code]))
            if not product_id.length:
               product_id = await (self.env['product.product'].create({'name': model, 'code': code}))
            bom_id = await (self.env['mrp.bom'].search(['product_id', '=', product_id.id]))
            if not bom_id.length:
               bom_id = await (self.env['mrp.bom'].create({'name': model, 'product_id': product_id.id}))
            for part in parts:
                promises.push(create_bom_line(bom_id, part, parts[part]))
            return Promise.all(promises)
        for model in models:
            await(create_model(model, models[model]))
            #promises.push(create_model(model, models[model]))
        #await (promises)
        return self.write({'imported': True})

    @api.server(async=True)
    def import_sequence(self):
        promises = []
        xlsx = require('node-xlsx')
        sheet = xlsx.parse(tools.atob(self.excel, buffer=True))[0]
        row = -1
        @async
        def create_picking_list(code, quantity, lot_no, sequence):
            product_id = await (self.env['product.product'].search(['code', '=', code]))
            bom_id = await (self.env['mrp.bom'].search(['product_id', '=', product_id.id]))
            bom_line_ids, sequence_id = await ([self.env['mrp.bom.line'].browse(bom_id.line_ids), self.env['mrp.sequence'].create({'name': lot_no, 'sequence': sequence})])
            promises = []
            routes = {index: 0 for index in range(1, 6)}
            trolley_group = {}
            for bom_line_id in bom_line_ids:
                product_id = await (self.env['product.product'].browse(bom_line_id.product_id))
                if not trolley_group[product_id.trolley_type_id]:
                   if not product_id.trolley_type_id: continue
                   trolley_group[product_id.trolley_type_id] = await (self.env['stock.picking.list'].create({'model_id': bom_id.id, 'sequence_id': sequence_id.id, 'trolley_type_id': product_id.trolley_type_id, 'sequence': sequence}))
                list_id = trolley_group[product_id.trolley_type_id]
                line_qty = bom_line_id.product_qty * quantity
                promise = self.env['stock.picking.list.line'].create({'route': 1, 'product_id': bom_line_id.product_id, 'product_qty': line_qty, 'qty_box': line_qty, 'box': 1, 'picking_list_id': list_id.id})
                promises.push(promise)
            return await (promises)
        for data in sheet.data:
            row += 1
            if row < 6: continue
            if not data[0]: continue
            lot_no = data.slice(9, 14).join('-')
            promise = create_picking_list(data[3], data[2], lot_no, data[1])
            promises.push(promise)
        await (promises)
        return self.write({'imported': True})

    @api.server(async=True)
    def import_po(self):
        promises = []
        xlsx = require('node-xlsx')
        sheet = xlsx.parse(tools.atob(self.excel, buffer=True))[0]
        row = -1
        @async
        def create_po(value):
            product_id = await (self.env['product.product'].search(['code', '=', value.part]))
            if not product_id.length: return
            return self.env['purchase.order'].create({'product_id': product_id.id, 'product_qty': value.quantity, 'vendor': value.vendor})
        for data in sheet.data:
            row += 1
            if row < 1: continue
            #if not data[0]: continue
            value = {'part': data[0], 'quantity': data[1], 'vendor': data[2]}
            await [create_po(value)]
        #return Promise.all(promises)

HPPMData()

menu.add({'id': 'import_data', 'parent': 'hppm_data', 'string': 'Import', 'model': 'hppm.data', 'sequence': 1})

view.add({'model': 'hppm.data', 'mode': 'tree', 'string': False, 'arch': """
<tree>
    <field name="name"/>
    <field name="date"/>
</tree>
"""})

view.add({'model': 'hppm.data', 'mode': 'form', 'string': False, 'arch': """
<form>
    <header>
        <button name="import_data" string="Import" invisible="active_id.imported == True"/>
    </header>
    <sheet>
        <group>
            <field name="name"/>
            <field name="excel"/>
        </group>
        <group>
            <field name="date"/>
            <field name="type"/>
            <field name="imported" readonly="True"/>
        </group>
    </sheet>
</form>
"""})
