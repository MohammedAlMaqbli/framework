import orm.models as models
import orm.fields as fields
import orm.tools as tools
import orm.api as api
from ir.ui import view, menu

class StockReceivingWizard(models.Model):
    _name = 'stock.receiving.wizard'

    #name = fields.Char(string="")
    scan = fields.Char(string="Laser Scan")
    order_ids = fields.Many2many('purchase.order.pack', string="Purchase Orders")
    received = fields.Boolean(string="Received")

    @api.onchange('scan', async=True)
    def onchange_scan(self):
        if not self.scan: return
        value = JSON.parse(self.scan)
        if value.inhouse_ckd: return tools.dialog.alert("Can't receive Inhouse/CKD Part")
        self.env['log.data'].log('Scan', value.name, 'id:', value.id, 'model: purchase.order.pack')
        order_id = await [self.env['purchase.order.pack'].browse(value.id)]
        self.scan = ''
        if not order_id.length: return
        self.order_ids.push(order_id.id)
        #tools.navigate('/form/purchase.order?id=' + order_id.id)

    @async
    def receive(self):
        order_ids = await (self.env['purchase.order.pack'].browse(self.order_ids))
        await ([order_ids.receive(), self.write({'received': True})])

StockReceivingWizard()

menu.add(id='scanner', string="Scanner", sequence=5)
menu.add(id='scanner_receiving', string="Receiving", parent='scanner', model='stock.receiving.wizard', view_id='stock.receiving.wizard.scan', sequence=1)

view.add(model='stock.receiving.wizard', mode='scan', arch="""
<form>
    <sheet>
        <group>
            <field name="scan"/>
        </group>
        <group width="100%">
            <field name="order_ids">
                <tree>
                    <field name="name"/>
                    <field name="product_id"/>
                    <field name="product_qty"/>
                </tree>
            </field>
        </group>
        <group>
            <button name="receive" string="Receive" invisible="active_id.received == True"/>
        </group>
    </sheet>
</form>
""")

class StockPickingWizard(models.Model):
    _name = 'stock.picking.wizard'

    #name = fields.Char(string="")
    scan = fields.Char(string="Laser Scan")

    @api.onchange('scan', async=True)
    def onchange_scan(self):
        if not self.scan: return
        self.env['log.data'].log('Scan Picking', self.scan)
        picking_list_id = await (self.env['stock.picking.list'].search(['name', '=', self.scan]))
        self.scan = ''
        if not picking_list_id.length: return
        tools.navigate('/view/stock.picking.list.form?id=' + picking_list_id.id)

StockPickingWizard()

#menu.add(id='scanner', string="Scanner", sequence=5)
menu.add(id='scanner_picking', string="Picking", parent='scanner', model='stock.picking.wizard', view_id='stock.picking.wizard.scan', sequence=2)

def init_picking():
    form = this
    if not form.refs.camera: return
    @async
    def onDetect(data):
        window.alert(data.codeResult.code)
        picking_list_id = await (models.env['stock.picking.list'].search(['name', '=', data.codeResult.code]))
        if not picking_list_id.length: return
        tools.navigate('/form/stock.picking.list?id=' + picking_list_id.id)
    form.refs.camera.onDetect = onDetect

view.add(model='stock.picking.wizard', mode='scan', init=init_picking, arch="""
<form>
    <sheet>
        <group>
            <field name="scan"/>
        </group>
        <group width="100%">
            <scanner-camera ref="camera"/>
        </group>
    </sheet>
</form>
""")



class ReceiveInhouse(models.Model):
    _name = 'stock.receive.inhouse'

    product_id = fields.Many2one('product.product', string="Inhouse Part")
    product_qty = fields.Float(string="Daisha")

    @async
    def receive(self):
        product_id = await [self.env['product.product'].browse(self.product_id)]
        if not product_id.min_box or not product_id.qty_box: return tools.dialog.alert("Minimum Box per-Daisha and Qty per-Box of the part must be set")
        is_pulley = False
        if 'pulley' in product_id.name.toLowerCase():
           is_pulley = True
        self.env['log.data'].log('Receive Inhouse part:', product_id.name)
        order_pack_ids = self.env['purchase.order.pack']
        for index in range(self.product_qty):
            for box in range(product_id.min_box):
                order_pack_id = await [self.env['purchase.order.pack'].create({'name': 'PO-Inhouse-' + tools.date.format(new Date(), 'ynj'), 'product_id': product_id.id, 'product_qty': product_id.qty_box, 'part_no': product_id.code, 'inhouse_ckd': True, 'is_pulley': is_pulley})]
                order_pack_ids.add(order_pack_id)
        await [order_pack_ids.receive(immediate=True)]
        order_pack_ids.print_label()
        tools.navigate('/')

ReceiveInhouse()

menu.add(id='receiving', string="Receiving", sequence=20)
menu.add(id='receiving_inhouse', parent='receiving', model='stock.receive.inhouse', view_id='stock.receive.inhouse.wizard', string="Inhouse", sequence=1)
#menu.add(id='receiving_print', parent='receiving', model='purchase.order.pack', string="Reprint Inhouse & CKD", sequence=3)

view.add(model='stock.receive.inhouse', mode='wizard', arch="""
<form>
    <sheet>
        <group>
            <field name="product_id" domain="['type', '=', 'inhouse']"/>
        </group>
        <group>
            <field name="product_qty"/>
        </group>
        <group>
            <button name="receive" string="Receive"/>
        </group>
    </sheet>
</form>
""")

class StockReceiveCKD(models.Model):
    _name = 'stock.receive.ckd'

    name = fields.Char(string="CKD Number", readonly=True)
    reference = fields.Char(string="Reference")
    file = fields.Binary(string="File Manifest", required=True, protect=True)
    order_pack_ids = fields.One2many('purchase.order.pack', 'ckd_id', string="Packs")

    @async
    def create(self, values=False, is_client=tools.configuration.client):
        if v'typeof window' != 'undefined':
           self.env['log.data'].log('Uploading CKD', self.name, 'model:', self._name)
           return self.__super__('create')(values=values, is_client=is_client)
        result = await [self.__super__('create')(values=values, is_client=is_client)]
        for record in result:
            await [record.import_file()]
        return result

    @api.server(async=True)
    def import_file(self):
        promises = []
        xlsx = require('node-xlsx')
        sheet = xlsx.parse(tools.atob(self.file, buffer=True))[0]
        row = -1
        @async
        def create_pack(value, separate):
            console.log(value.part_no)
            product_id = await (self.env['product.product'].search(['code', '=', value.part_no]))
            if not product_id.length or not product_id.qty_box: return
            if separate: return self.env['purchase.order.pack'].create({'name': value.name, 'product_id': product_id.id, 'product_qty': value.quantity, 'inhouse_ckd': True, 'ckd_id': self.id})
            boxes = value.quantity / product_id.qty_box
            promises = []
            for index in range(boxes):
                promise = self.env['purchase.order.pack'].create({'name': value.name, 'product_id': product_id.id, 'product_qty': value.quantity / boxes, 'inhouse_ckd': True, 'ckd_id': self.id})
                promises.push(promise)
            return Promise.all(promises)
        start = False
        start_row = None
        sequence = 1
        if sheet.data[0][5]: self.write({'name': sheet.data[0][5]})
        for data in sheet.data:
            row += 1
            if data[1] != ' CONTAINER NUMBER':
               if not start: continue
            elif not start:
               start = True
               start_row = row + 2
            if row < start_row: continue
            #if not data[0]: continue
            if not data[16]: continue
            value = {'name': 'Pack-CKD-' + data[4] + '-' + sequence, 'part_no': data[16].split(' ').join(''), 'quantity': data[19]}
            sequence += 1
            await [create_pack(value, data[14] == '002')]
        #return Promise.all(promises)

StockReceiveCKD()

menu.add(id='receiving_ckd', parent='receiving', model='stock.receive.ckd', string="CKD", sequence=2)

view.add(model='stock.receive.ckd', mode='tree', arch="""
<tree>
    <field name="name"/>
    <field name="reference"/>
</tree>
""")

view.add(model='stock.receive.ckd', mode='form', arch="""
<form>
    <sheet>
        <group>
            <field name="name"/>
            <field name="file" invisible="active_id.id != null"/>
        </group>
        <group>
            <field name="reference"/>
        </group>
        <group width="100%">
            <field name="order_pack_ids">
                <tree>
                    <field name="product_id"/>
                    <field name="product_qty"/>
                </tree>
            </field>
        </group>
    </sheet>
</form>
""")

class StockReceivingCKD(models.Model):
    _name = 'stock.receiving.ckd'

    scan = fields.Char(string="Laser Scan")
    order_ids = fields.Many2many('purchase.order.pack', string="Purchase Orders")
    received = fields.Boolean(string="Received")

    @api.onchange('scan', async=True)
    def onchange_scan(self):
        if not self.scan: return
        value = JSON.parse(self.scan)
        if not value.ckd_id:
           if value.inhouse_ckd: return tools.dialog.alert("Can't receive Inhouse Part")
           else: return tools.dialog.alert("Can't receive Local Part")
        self.env['log.data'].log('Scan CKD', value.name, 'id:', value.id, 'model: purchase.order.pack')
        order_id = await [self.env['purchase.order.pack'].browse(value.id)]
        self.scan = ''
        if not order_id.length: return
        self.order_ids.push(order_id.id)
        #tools.navigate('/form/purchase.order?id=' + order_id.id)

    @async
    def receive(self):
        order_ids = await (self.env['purchase.order.pack'].browse(self.order_ids))
        await ([order_ids.receive(immediate=True), self.write({'received': True})])

StockReceivingCKD()

#menu.add(id='receiving_scan_ckd', string="Scan CKD", parent='receiving', model='stock.receiving.ckd', view_id='stock.receiving.ckd.scan', sequence=3)

view.add(model='stock.receiving.ckd', mode='scan', arch="""
<form>
    <sheet>
        <group>
            <field name="scan"/>
        </group>
        <group width="100%">
            <field name="order_ids">
                <tree>
                    <field name="name"/>
                    <field name="product_id"/>
                    <field name="product_qty"/>
                </tree>
            </field>
        </group>
        <group>
            <button name="receive" string="Receive" invisible="active_id.received == True"/>
        </group>
    </sheet>
</form>
""")
