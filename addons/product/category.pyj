import orm.models as models
import orm.fields as fields
import orm.api as api
from ir.ui import menu, view
from ir.data import data

defaults = {}

class ProductCategory(models.Model):
    _name = 'product.category'

    name = fields.Char(string="Name", required=True)
    reference = fields.Char(string="Reference")
    level = fields.Selection(['1', 'Layer 1'], ['2', 'Layer 2'], ['3', 'Layer 3'], string="Layer on Rack")

ProductCategory()

menu.add({'id': 'category', 'parent': 'stock', 'string': 'Categories', 'model': 'product.category', 'sequence': 9})

view.add({'model': 'product.category', 'mode': 'tree', 'string': False, 'arch': """
<tree>
    <field name="name"/>
    <field name="reference"/>
</tree>
"""})

view.add({'model': 'product.category', 'mode': 'form', 'string': False, 'arch': """
<form>
    <sheet>
        <group>
            <field name="name"/>
        </group>
        <group>
            <field name="reference"/>
            <field name="level"/>
        </group>
    </sheet>
</form>
"""})

categories = ['Insole', 'Outsole', 'Upper', 'Strobel']

def create_categories():
    promises = []
    levels = ['3', '1', '2', '3']
    for category in categories:
        promise = models.env['product.category'].with_context(limit=1).search(['reference', '=', 'ADS-' + category])
        promises.push(promise)
    return Promise.all(promises).then(
    def (result):
        promises = []
        for index, category in enumerate(categories):
            if result[index].length:
               defaults[category.toLowerCase() + '_id'] = result[index].ids[0]
            else:
               promises.push(models.env['product.category'].create({'name': category, 'reference': 'ADS-' + category, 'level': levels[index]}))
        if promises.length:
           return Promise.all(promises).then(
           def (result):
               for index, category in enumerate(categories):
                   defaults[category.toLowerCase() + '_id'] = result[index].ids[0]
           )
    )

data.append(create_categories)
