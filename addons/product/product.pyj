import orm.models as models
import orm.fields as fields
import orm.api as api
from stock.pack import StockPack
from stock.location import defaults as location_default
from ir.ui import menu, view
from ir.data import data

defaults = {}

class ProductProduct(models.Model):
    _name = 'product.product'

    name = fields.Char(string="Product", required=True, index=True)
    code = fields.Char(string="Product Code", index=True)
    code_trimmed = fields.Char(string="Product Code (Trimmed)", index=True)
    base_name = fields.Char(string="Product Name", index=True)
    type = fields.Selection(['ckd', 'CKD'], ['local', 'Local'], ['inhouse', 'Inhouse'], ['sozai', 'Sozai'], ['fg', 'Finish Good'], string="Type", index=True)
    description = fields.Text(string="Description")
    category_id = fields.Many2one('product.category', string="Category", index=True)
    route = fields.Integer(string="Route AGV")
    mcvt_trolley_type_id = fields.Many2one('stock.trolley.type', string="Trolley Type (MCVT)", index=True)
    fwd_trolley_type_id = fields.Many2one('stock.trolley.type', string="Trolley Type (4WD)", index=True)
    flexi_trolley_type_id = fields.Many2one('stock.trolley.type', string="Trolley Type (Flexi)", index=True)
    qty_box = fields.Float(string="Qty/Box")
    min_box = fields.Float(string="Minimum Box")
    pl_from = fields.Char(string="P/L From")
    supplier = fields.Char(string="Supplier")
    model_type = fields.Char(string="Model")
    packing_type = fields.Char(string="Packing Type")
    c_code = fields.Char(string="C/Code")

ProductProduct()

def check_session():
    if v'typeof window' == 'undefined': return
    if not window.localStorage.session_start_date:
       window.localStorage.session_start_date = tools.date.now().toISOString()
       return
    date = new Date(window.localStorage.session_start_date)
    date.setDate(date.getDate() + 90)
    if date.toISOString() <= tools.date.now().toISOString():
       def navigate():
           tools.navigate('/view/change.password.wizard')
       tools.dialog.alert('After 90 Days, you have to change your password', navigate)

menu.add({'id': 'stock', 'string': 'Inventory', 'sequence': 20})
menu.add({'id': 'product', 'parent': 'master_data', 'string': 'Packing', 'model': 'product.product', 'view_id': 'product.product.tree_packing', 'sequence': 10})

view.add({'model': 'product.product', 'init': check_session, 'mode': 'tree', 'string': False, 'arch': """
<tree domain="context.types ? ['type', 'in', context.types] : []">
    <field name="type"/>
    <field name="code"/>
    <field name="base_name"/>
    <field name="pl_from"/>
    <field name="supplier"/>
    <field name="model_type"/>
    <field name="packing_type"/>
    <field name="c_code"/>
</tree>
"""})

view.add(model='product.product', mode='tree_packing', arch="""
<tree-page title="Master Data Packing"/>
""", context={'types': ['ckd', 'local', 'inhouse', 'sozai']})

view.add({'model': 'product.product', 'mode': 'form', 'string': False, 'arch': """
<form>
    <sheet>
        <group>
            <field name="base_name"/>
            <field name="code"/>
            <field bawah_icon="hehe" name="type"/>
        </group>
        <group>
            <field name="description"/>
            <field name="route"/>
        </group>
        <!--<group>
            <field name="total_qty"/>
            <field name="remaining_qty"/>
        </group>
        <group>
            <field name="incoming_qty"/>
            <field name="actual_qty"/>
        </group>-->
    </sheet>
</form>
"""})

categories = {'PLATE C,PULLEY BRG SET': '21101-5T0 -0001', 'PLATE A, OIL GUIDE': '21103-5T0 -0000', 'CASE TC SOZAI': '21111-5T0 -0000-NA'}

def create_products():
    promises = []
    #levels = ['3', '1', '2', '3']
    for category in categories:
        promise = models.env['product.product'].with_context(limit=1).search(['code', '=', categories[category]])
        promises.push(promise)
    create_default = Promise.all(promises).then(
    def (result):
        promises = []
        for index, category in enumerate(categories):
            if result[index].length:
               defaults[category] = result[index].ids[0]
            else:
               promises.push(models.env['product.product'].create({'name': category, 'code': categories[category]}))
        if promises.length:
           return Promise.all(promises).then(
           def (result):
               for index, category in enumerate(categories):
                   defaults[category] = result[index].ids[0]
           )
    )
    if v'typeof window' != 'undefined': return create_default
    @async
    def after_create():
        product_id = await (models.env['product.product'].search(['code', '=', '2003G-5YE-0000-18']))
        if product_id.length: return
        product_id = await (models.env['product.product'].create({'name': 'BRIO CVT MISSION ASSY 2J5YEC0000', 'code': '2003G-5YE-0000-18'}))
        bom_id = await (models.env['mrp.bom'].create({'name': 'BRIO CVT MISSION ASSY 2J5YEC0000 2003G-5YE-0000-18', 'product_id': product_id.id}))
        for product in Object.values(defaults):
            models.env['mrp.bom.line'].create({'bom_id': bom_id.id, 'product_id': product, 'product_qty': 1})
    return create_default.then(after_create)

#data.append(create_products)

#data.append(check_session)
