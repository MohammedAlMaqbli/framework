import orm.models as models
import orm.fields as fields
import orm.tools as tools
import orm.api as api
from ir.ui import view, menu
from utils import create_upload_button

class MrpBom(models.Model):
    _name = 'mrp.bom'

    @async
    def _get_code(self):
        product_id = await [self.env['product.product'].browse(self.product_id)]
        return product_id.code

    name = fields.Char(string="Model", required=True)
    code = fields.Char(string="Code", compute=_get_code, store=False)
    product_id = fields.Many2one('product.product', string="Finish Good", index=True, required=True)
    reference = fields.Char(string="Reference")
    line_ids = fields.One2many('mrp.bom.line', 'bom_id', string="BoM Lines")

    @async
    def move_pulley_out(self, location_id, pack_id, ratio, product_ids, line_type, sequence):
        line_ids = await [self.env['mrp.bom.line'].browse(self.line_ids)]
        @async
        def check_carry_over(line_id):
            type = line_type.split('_')[0]
            product_id = await [self.env['product.product'].browse(line_id.product_id)]
            threshold = product_id[type + '_carry_over_qty']
            if not threshold: return
            trolley_type_id = product_id[type + '_trolley_type_id']
            quant_id = self.env['stock.quant'].browse()
            quant_id.product_id = product_id.id
            quantity = await [quant_id._get_assy_qty()]
            if quantity <= threshold:
               return self.env['stock.trigger.board'].trigger(line_type, trolley_type_id, sequence)
        def create_quant_move(line_id):
            return Promise.all([
              self.env['stock.move'].create({'product_id': line_id.product_id, 'product_qty': line_id.product_qty * ratio, 'location_src_id': pack_id.location_id, 'location_dest_id': location_id}),
              self.env['stock.quant'].create({'product_id': line_id.product_id, 'product_qty': -line_id.product_qty * ratio, 'location_id': pack_id.location_id, 'line_type': line_type}),
              self.env['stock.quant'].create({'product_id': line_id.product_id, 'product_qty': line_id.product_qty * ratio, 'location_id': location_id, 'line_type': line_type}),
            ])
        for line_id in line_ids:
            if line_id.product_id in product_ids: continue
            await [create_quant_move(line_id)]
            check_carry_over(line_id)

MrpBom()

class MrpBomLine(models.Model):
    _name = 'mrp.bom.line'

    @async
    def _get_type(self):
        product_id = await [self.env['product.product'].browse(self.product_id)]
        return product_id.type

    bom_id = fields.Many2one('mrp.bom', string="BoM", index=True)
    product_id = fields.Many2one('product.product', string="Part", required=True, index=True)
    product_qty = fields.Integer(string="Quantity")
    part_type = fields.Char(string="Type", compute=_get_type, store=False)

MrpBomLine()

menu.add(id='mrp_planning', string="Planning", sequence=3)
menu.add(id='master_data', string="Master Data", sequence=4)
menu.add(id='mrp_bom', string="Bill of Materials", parent='master_data', model='mrp.bom', sequence=1)

view.add(init=create_upload_button, model='mrp.bom', mode='tree', arch="""
<tree>
    <field name="name"/>
    <field name="code"/>
    <field name="reference"/>
</tree>
""")

view.add(model='mrp.bom', mode='form', arch="""
<form>
    <sheet>
        <group>
            <field name="name"/>
            <field name="reference"/>
        </group>
        <group>
            <field name="product_id"/>
        </group>
        <group width="100%">
            <field name="line_ids">
                <tree>
                    <field name="product_id"/>
                    <field name="product_qty"/>
                    <field name="part_type"/>
                </tree>
            </field>
        </group>
    </sheet>
</form>
""")
