import orm.models as models
import orm.fields as fields
import orm.tools as tools
import orm.api as api
from ir.ui import view, menu
from scripts import create_upload_button

class MrpSequence(models.Model):
    _name = 'mrp.sequence'

    name = fields.Char(string="Lot No.")
    sequence = fields.Integer(string="Sequence")
    picking_list_ids = fields.One2many('stock.picking.list', 'sequence_id', string="Picking Lists")
    type = fields.Selection(['mcvt', 'MCVT'], ['fwd', '4WD'], ['flexi', 'Flexi'], string="Type")
    bom_id = fields.Many2one('mrp.bom', string="Model")
    date = fields.Datetime(string="Date", index=True)
    destination = fields.Char(string="Destination")
    quantity = fields.Float(string="Quantity")

    @api.depends('sequence', async=True)
    def onchange_sequence(self, sequence):
        if not sequence: return
        picking_list_ids, line_list_ids = await ([self.env['stock.picking.list'].browse(self.picking_list_ids), self.env['stock.picking.list.line'].search(['picking_list_id', 'in', self.picking_list_ids])])
        return await ([picking_list_ids.write({'sequence': sequence}), line_list_ids.write({'sequence': sequence})])

MrpSequence()

menu.add(id='mrp_planning', string="Planning", sequence=3)
menu.add(id='mrp_sequence', string="Sequence Plan", parent='mrp_planning', model='mrp.sequence', sequence=2)
menu.add(id='mrp_sequence', string="Sequence MCVT", parent='mrp_planning', model='mrp.sequence', view_id='mrp.sequence.tree_mcvt', sequence=3)
menu.add(id='mrp_sequence', string="Sequence 4WD", parent='mrp_planning', model='mrp.sequence', view_id='mrp.sequence.tree_fwd', sequence=4)
menu.add(id='mrp_sequence', string="Sequence Flexi", parent='mrp_planning', model='mrp.sequence', view_id='mrp.sequence.tree_flexi', sequence=5)

view.add(init=create_upload_button, model='mrp.sequence', mode='tree', arch="""
<tree domain="context.type ? ['type', '=', context.type] : []">
    <field name="name"/>
    <field name="bom_id"/>
    <field name="quantity"/>
    <field name="destination"/>
    <field name="sequence" sort="asc"/>
</tree>
""")

view.add(model='stock.picking.list', mode='tree_mcvt', arch="""
<tree-page title="Sequence MCVT"/>
""", context={'type': 'mcvt'})

view.add(model='stock.picking.list', mode='tree_fwd', arch="""
<tree-page title="Sequence 4WD"/>
""", context={'type': 'fwd'})

view.add(model='stock.picking.list', mode='tree_flexi', arch="""
<tree-page title="Sequence Flexi"/>
""", context={'type': 'flexi'})

view.add(model='mrp.sequence', mode='form', arch="""
<form>
    <sheet>
        <group>
            <field name="name"/>
        </group>
        <group>
            <field name="sequence"/>
        </group>
        <group width="100%">
            <field name="picking_list_ids">
                <tree>
                    <filed name="name"/>
                    <field name="trolley_type_id"/>
                    <field name="model_id"/>
                </tree>
            </field>
        </group>
    </sheet>
</form>
""")

class MrpSequenceReorder(models.Model):
    _name = 'mrp.sequence.reorder'

    type = fields.Selection(['mcvt', 'MCVT'], ['fwd', '4WD'], ['flexi', 'Flexi'], string="Type", required=True)
    date = fields.Date(string="Date", required=True)
    sequence_from = fields.Integer(string="Sequence")
    sequence_from_id = fields.Many2one('mrp.sequence', string="Lot No.", required=True)
    date_to = fields.Date(string="Date (Optional)")
    sequence_to = fields.Integer(string="Sequence")
    sequence_to_id = fields.Many2one('mrp.sequence', string="Lot No.")

    @api.onchange('sequence_from', async=True)
    def onchange_sequence_from(self):
        if self.sequence_from_changing or not self.sequence_from or not self.type or not self.date: return
        self.sequence_from_changing = True
        date = new Date(self.date)
        date.setHours(0, 0, 0, 0)
        sequence_id = await [self.env['mrp.sequence'].search(['date', '=', date.toISOString()], ['type', '=', self.type], ['sequence', '=', self.sequence_from])]
        if not sequence_id.length: return
        self.sequence_from_id = sequence_id
        self.sequence_from_changing = False

    @api.onchange('sequence_from_id', async=True)
    def onchange_sequence_from_id(self):
        if self.sequence_from_changing or not self.sequence_from_id: return
        self.sequence_from_changing = True
        sequence_id = await [self.env['mrp.sequence'].browse(self.sequence_from_id)]
        if not sequence_id.length: return
        self.type = sequence_id.type
        self.sequence_from = sequence_id.sequence
        self.sequence_from_changing = False

    @api.onchange('sequence_to', async=True)
    def onchange_sequence_to(self):
        date = self.date or self.date_to
        if self.sequence_to_changing or not self.sequence_to or not self.type or not date: return
        self.sequence_to_changing = True
        date = new Date(date)
        date.setHours(0, 0, 0, 0)
        sequence_id = await [self.env['mrp.sequence'].search(['date', '=', date.toISOString()], ['type', '=', self.type], ['sequence', '=', self.sequence_to])]
        if not sequence_id.length: return
        self.sequence_to_id = sequence_id
        self.sequence_to_changing = False

    @api.onchange('sequence_to_id', async=True)
    def onchange_sequence_to_id(self):
        if self.sequence_to_changing or not self.sequence_to_id: return
        self.sequence_to_changing = True
        sequence_id = await [self.env['mrp.sequence'].browse(self.sequence_to_id)]
        if not sequence_id.length: return
        self.type = sequence_id.type
        self.sequence_to = sequence_id.sequence
        self.sequence_to_changing = False

    @async
    def reorder_sequence(self):
        if not self.sequence_to: return tools.dialog.alert("Fill sequence to switch to")
        return self.reorder_sequence_server()

    @api.server(async=True)
    def reorder_sequence_server(self):
        promises = [self.env['mrp.sequence'].browse(self.sequence_from_id)]
        if self.sequence_to_id: promises.push(self.env['mrp.sequence'].browse(self.sequence_to_id))
        sequence_from_id, sequence_to_id = await (promises)
        return await ([sequence_from_id.write({'sequence': self.sequence_to}), sequence_to_id and sequence_to_id.write({'sequence': self.sequence_from})])

MrpSequenceReorder()

menu.add(id='mrp_sequence_reorder', string="Reorder Sequence", parent='mrp_planning', model='mrp.sequence.reorder', view_id='mrp.sequence.reorder.wizard', sequence=7)

view.add(model='mrp.sequence.reorder', mode='wizard', arch="""
<form>
    <sheet>
        <group>
            <field name="type"/>
        </group>
        <group/>
        <group title="From">
            <field name="date"/>
            <field name="sequence_from"/>
            <field name="sequence_from_id"/>
        </group>
        <group title="Switch To">
            <field name="date_to"/>
            <field name="sequence_to"/>
            <field name="sequence_to_id"/>
        </group>
        <group>
            <button name="reorder_sequence" string="Reorder"/>
        </group>
    </sheet>
</form>
""")
