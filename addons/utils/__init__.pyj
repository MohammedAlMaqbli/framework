def wait(ms):
    return new Promise(
    def (resolve, reject):
        setTimeout(
        def timeout():
            resolve()
        , ms)
    )

@async
def create_upload_button():
    await [wait(500)]
    if document.getElementsByClassName('preloader-modal').length:
       def wait(): return document.querySelector('div.ag-body-container') and document.querySelector('div.ag-body-container').children.length
       await [window.tools.wait_exist(wait)]
    if document.getElementById('upload_shortcut'):
       document.getElementById('upload_shortcut').remove()
    create_element = document.querySelector('.data-table-title .button.button-fill')
    if not create_element: return
    defaults = {'purchase.order': 'po', 'mrp.bom': 'bom', 'mrp.sequence': 'sequence_mcvt', 'stock.trolley.type': 'daisha_mcvt', 'stock.picking.lot': 'sequence_mcvt', 'product.product': 'data_packing', 'stock.receive.zone': 'receive_zone'}
    upload_button = '<a id="upload_shortcut" class="button" href="#" style="display: inline-block;background-color: rgb(255, 255, 255);">Upload</a>'
    if models.env.context.active_model == 'stock.picking.lot': upload_button = upload_button.replace('Upload', 'Print')
    create_element.insertAdjacentHTML('afterend', upload_button)
    def onclick():
        if models.env.context.active_model != 'stock.picking.lot':
           model = models.env.context.active_model
           if defaults[model]: models.env.context.default_import_type = defaults[model]
           return tools.navigate('/form/hppm.data')
        trolley_types = list({trolley.innerHTML for trolley in document.querySelectorAll('div.ag-body-container div[col-id=trolley_type_id]')}).sort()
        collator = new Intl.Collator(undefined, {'numeric': True, 'sensitivity': 'base'})
        sequences = list({trolley.innerHTML for trolley in document.querySelectorAll('div.ag-body-container div[col-id=sequences]')}).sort(collator.compare)
        types = []
        for trolley in trolley_types:
            type = ''
            for word in trolley:
                if not word.match(/[A-Za-z]/): break
                type += word
            if type in types: continue
            types.push(type)
        types = [str.format('<a class="button button-fill" style="margin: 3px" onclick="show_picking_list_trolley(this.title)" title="{0}">{0}</a>', type) for type in types].join('')
        dialog = tools.dialog.create({'title': 'Choose Type', 'content': str.format('<div style="display: flex; flex-wrap: wrap; padding-top: 10px;">{}</div>', types), 'closeByBackdropClick': True})
        def show_picking_list_trolley(type):
            nonlocal dialog
            dialog.close()
            trolleys = [str.format('<a class="button button-fill" style="margin: 3px" onclick="show_picking_list_sequence(this.title)" title="{0}">{0}</a>', trolley) for trolley in trolley_types if type in trolley].join('')
            dialog = tools.dialog.create({'title': 'Choose Type', 'content': str.format('<div style="display: flex; flex-wrap: wrap; padding-top: 10px;">{}</div>', trolleys), 'closeByBackdropClick': True})
            dialog.open()
        window.show_picking_list_trolley = show_picking_list_trolley
        def show_picking_list_sequence(trolley):
            nonlocal dialog
            dialog.close()
            def onClick(sequence): return window.print_picking_list_hppm(sequence, trolley)
            dialog = tools.dialog.prompt('', 'Sequence Picking', onClick)
            input = document.querySelector('input.dialog_input')
            if not input: return
            input.type = 'number'
            #sequence_buttons = [str.format('''<a class="button button-fill" style="margin: 3px" onclick="print_picking_list_hppm(this.title, '{1}')" title="{0}">{0}</a>''', sequence, trolley) for sequence in sequences].join('')
            #dialog = tools.dialog.create({'title': 'Choose Sequence', 'content': str.format('<div style="display: flex; flex-wrap: wrap; padding-top: 10px;">{}</div>', sequence_buttons), 'closeByBackdropClick': True})
            #dialog.open()
        window.show_picking_list_sequence = show_picking_list_sequence
        @async
        def print_picking_list_hppm(sequence, trolley):
            if not localStorage.last_list_sequence: localStorage.last_list_sequence = '[]'
            dialog.close()
            row = None
            for column in document.querySelectorAll('div.ag-body-container div[col-id=trolley_type_id]'):
                if column.innerHTML != trolley: continue
                if column.parentElement.querySelector('div[col-id=sequence_picking]').innerHTML != sequence: continue
                row = column.parentElement
            if not row: return
            row.querySelector('div[col-id=date] span.ag-icon-checkbox-unchecked').click()
            await [wait(500)]
            document.querySelector('div.card-body a.button:nth-child(6)').click()
        window.print_picking_list_hppm = print_picking_list_hppm
        dialog.open()
    document.getElementById('upload_shortcut').onclick = onclick
    if models.env.context.active_model != 'stock.picking.lot': return
    """first_row = document.querySelector('div.ag-body-container div[row-id="0"]')
    sequence = first_row.querySelector('div[col-id=sequence]').innerHTML
    for column in document.querySelectorAll('div.ag-body-container div[col-id=sequence]'):
        if column.innerHTML != sequence: continue
        column.parentElement.style.color = 'red'"""

#if v'typeof window' != 'undefined': window.create_upload_button = create_upload_button

def show_qrcode(id, field):
    def show():
        if not models.env.context.active_id or not models.env.context.active_id[field]: return
        qrcode = document.getElementById(id)
        QRCode = window.QRCode
        new QRCode(qrcode, models.env.context.active_id[field])
        button = document.getElementById(id + '_button')
        if button:
           def onclick():
               qrcode.insertAdjacentHTML('beforeend', '<h2 style="font-family: Roboto,system-ui,Noto,Helvetica,Arial,sans-serif">' + qrcode.title + '</h2>')
               printElement(qrcode)
           button.onclick = onclick
    return show

pool = []
pool_max = 10
pool_current = 0
pool_map = {}

def generate_pdf417(*args, **kwargs):
    if not kwargs.id: return
    if pool_map[event.data.id]: return pool_map[event.data.id][1]
    nonlocal pool_current
    if pool.length != pool_max:
       pool.push(new Worker('./pdf417-worker.js'))
       def eventListener(event):
           if not pool_map[event.data.id]: return
           pool_map[event.data.id][0](event.data.result)
           del pool_map[event.data.id]
       pool[-1].addEventListener('message', eventListener)
       pool_current = pool.length - 1
    else:
       if pool_current == (pool_max - 1): pool_current = 0
       else: pool_current += 1
    worker = pool[pool_current]
    def promise(resolve, reject):
        pool_map[kwargs.id] = [resolve]
    worker.postMessage({'id': kwargs.id, 'args': args})
    promise = Promise(promise)
    pool_map[kwargs.id].push(promise)
    return promise
