import fields
from tools import keys, dict, checkBase64
from pouchdb import db
class Model():
    _name = 'undefined'
    _inherit = False
    _fields = {}
    _values = {}

    def __init__(self):
        schema = {'singular': self._name, 'plural': self._name}
        #Reserved fields
        self._fields['id'] = fields.Char(string="ID")
        for key in keys(self._fields):
            if self._fields[key].type in ['many2one', 'one2many', 'many2many', 'one2one']:
               if not schema.relations:
                  schema.relations = {}
               type = 'belongsTo'
               if self._fields[key].type in ['one2many', 'many2many']:
                  type = 'hasMany'
               if self._fields[key].type != 'one2many':
                  schema.relations[key] = {type: self._fields[key].relation}
               else:
                  schema.relations[key] = {type: {'type': self._fields[key].relation, 'options': {'queryInverse': self._fields[key].inverse}}}
            self._values[key] = None
            v"""Object.defineProperty(self, key, {
            get: function() {return self._values[key]},
            set: function(value) {self._values[key] = self.adapt(key, value)},
            })"""
        v'Object.freeze(self)'
        v'Object.freeze(self._fields)'
        v'Object.seal(self._values)'
        db.setSchema([schema])

    def read(self):
        return self._values

    def adapt(self, key, value):
        if key == 'id':
           value = self._fields[key].value
        elif self._fields[key].type in ['char', 'text']:
           value = String(value)
        elif self._fields[key].type == 'integer':
           value = parseInt(value)
           if isNaN(value):
              return Exception("Not a valid Number")
        elif self._fields[key].type == 'float':
           value = parseFloat(value)
           if isNaN(value):
              return Exception("Not a valid Number")
        elif self._fields[key].type == 'boolean':
           if value in ['true', 'True']:
              value = True
           elif value in ['false', 'False']:
              value = False
           elif type(value) == String:
              return Exception("Not a valid Boolean")
           else:
              value = Boolean(value)
        elif self._fields[key].type == 'binary':
           if not checkBase64(value):
              return Exception("Not a valid base64")
        elif self._fields[key].type in ['many2one', 'one2one']:
           if isinstance(value, models.Model):
              value = value.id
           else:
              value = parseInt(value)
              if isNaN(value):
                 return Exception("Not a valid ID")
        elif self._fields[key].type == 'selection':
           if not value in dict(self._fields[key].selection):
              return Exception("Incorrect value")
        return value

    def update(self, values):
        for key in keys(values):
            value = self.adapt(key, values[key])
            self._values[key] = value

    def create(self, values={}):
        if not values:
           values = self.read()
        db.rel.save(self._name, values)
