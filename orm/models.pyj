import orm.fields as fields
from orm.tools import exist, keys, merge, dict, checkBase64, configuration, ajax, array
from orm.pouchdb import db

env = {}
schemas = {}

def queryInverse(type, records, fields, _fields):
    for record in records[type]:
        for field in fields:
            record[field] = []
            for result in records[_fields[field].relation]:
                if result[_fields[field].inverse] == record.id:
                   record[field].push(result.id)
    return records

class Model():
    _name = 'undefined'
    _inherit = False
    #_fields = {}
    #_values = {}
    #_related = {}
    #This JSON objects turnout having the same id, separating them on class initiation

    def __init__(self, _is_env=False, _is_singleton=True):
        self._fields = {}
        self._values = {}
        self._related = {}
        self._one2many_fields = []
        self._is_env = _is_env
        self._is_singleton = _is_singleton
        if 'Model' not in env:
           env['Model'] = Model
        if 'context' not in env:
            env['context'] = {}
        if not exist(env[self._name]):
           env[self._name] = True
           v'env[self._name] = new self.constructor(_is_env=true)'
           env[self._name]._is_env = True
        self.env = env
        if self._is_env:
           return
        schema = {'singular': self._name, 'plural': self._name}
        schemas[self._name] = schema
        #Reserved fields
        reserved = ['id', '_id', 'rev', '_rev']
        if self._is_singleton:
           self.id = fields.Char(string="ID", related='_id', store=True)
           self.rev = fields.Char(string="DB Revision Number", related='_rev', store=True)
           self._id = fields.Char(string="ID (Raw)")
           self._rev = fields.Char(string="DB Revision Number")
        else:
           self.ids = fields.Data(string="IDs")
           reserved = ['ids']
        valid_fields = [key for key in Object.getOwnPropertyNames(self.constructor.prototype) if key[0] != '_' and key not in ['constructor', 'env', 'values']].concat(reserved)
        for key in valid_fields:
            #if key in self._fields:
            #   self[key] = self._fields[key]
            if self[key].type in ['many2one', 'one2many', 'many2many', 'one2one']:
               if not schema.relations:
                  schema.relations = {}
               type = 'belongsTo'
               if self[key].type in ['one2many', 'many2many']:
                  type = 'hasMany'
               if self[key].type != 'one2many':
                  schema.relations[key] = {type: {'type': self[key].relation, 'options': {'async': False}}} #Turning async into false since one2many doesn't work
               else:
                  schema.relations[key] = {type: {'type': self[key].relation, 'options': {'async': False, 'queryInverse': self[key].inverse}}}
                  self._one2many_fields.push(key)
               if type == 'belongsTo':
                  db.createIndex({'index': {'fields': ['data.'+key, '_id']}})
            self._fields[key] = self[key]
            if self._is_singleton:
               if exist(self._fields[key].related):
                  if not exist(self._related[self._fields[key].related]):
                     self._related[self._fields[key].related] = []
                  self._related[self._fields[key].related].push(key)
               self[key] = self._fields[key].default
               self._values[key] = self[key]
               #Once more disable getter and setter, massive bugs
               """Object.defineProperty(self, key, {
               'get': def(): return self._values[key]
               ,
               'set': def(value): self._values[key] = self.adapt(key, value)
               }})"""
        self.env[self._name]._fields = self._fields
        Object.defineProperty(self, 'values', {
        'get': def (): return self._values
        ,
        'set': def (newvalue):
                   if not exist(newvalue):
                      return
                   if self._is_singleton:
                      self._values = merge(self._values, newvalue)
                      for key in self._fields:
                          if key in newvalue:
                             self[key] = self.adapt(key, newvalue[key])
                   else:
                      self._values = newvalue
                      self.ids = [object.id for object in newvalue]
        })
        Object.defineProperty(self, 'length', {'get':
        def (): 
            if self._is_env:
               return 0
            elif self._is_singleton:
               if not exist(self.id) or not exist(self.value):
                  return 0
               return 1
            else:
               return self._values.length
        })
        #Disabling seal and freeze altogether because they cause bugs
        #v'Object.seal(self)'
        #v'Object.freeze(self._fields)'
        #v'Object.seal(self._values)'
        try:
           db.setSchema([schemas[key] for key in schemas])
        except:
           pass

    def __iter__(self):
        if self._is_env or self.length < 1:
           return []
        elif self._is_singleton:
           return [self]
        lists = []
        for value in self.values:
            result = self.browse()
            result.values = value
            lists.push(result)
        return lists

    def browse(self, ids=False, is_singleton=True, is_client=configuration.client):
        if not exist(ids):
           v'return new self.constructor(false, is_singleton)'
        elif is_client:
           return ajax('post', 'json', configuration.url + '/api/browse', {'login': self.env.user.login, 'password': self.env.user.password, 'encrypted': True, 'model': self._name, 'ids': ids}).then(
           def (result):
               record = self.browse(is_singleton=type(result.values) not in tools.array)
               record.values = result.values
               self.browse(ids=ids, is_client=False).then(
               def (records):
                   if records.length > 0:
                      records.write(result.values, is_client=False)
                   else:
                      del result.values.rev
                      del result.values._rev
                      del result.values._id
                      db.rel.save(record._name, result.values)
               ).catch(
               def (error):
                   console.log(error)
                   del result.values.rev
                   del result.values._rev
                   del result.values._id
                   db.rel.save(record._name, result.values)
               )
               return record
           ).catch(
           def (error):
               console.log(error)
               return self.browse(ids, is_client=False)
           )
        elif type(ids) in [ρσ_list_constructor, Array]:
           #result = self.browse()
           if ids.length > 1:
              v'var result = new self.constructor(false, false)'
              return db.rel.find(result._name, ids).then(
              def (record):
                  record = queryInverse(result._name, record, result._one2many_fields, result._fields)
                  #result.ids = ids
                  result.values = record[result._name]
                  return result
              )
           else:
              ids = ids[0]
        if type(ids) == String:
           result = self.browse()
           #return db.get(db.rel.makeDocID({'type': result._name, 'id': ids})).then(
           return db.rel.find(result._name, ids).then(
           def (record):
               record = queryInverse(result._name, record, result._one2many_fields, result._fields)
               #result.id = ids
               #record.data.id = db.rel.parseDocID(record._id).id
               #record.data.rev = record._rev
               result.values = record[result._name][0]#.data
               return result
           )
        return result

    def search(self, *args, **options):
        if options.is_client == undefined:
           options.is_client = configuration.client
        if exist(self.env.context.active_limit):
           options.limit = self.env.context.active_limit
        if exist(self.env.context.active_index):
           options.index = self.env.context.active_index
        if exist(options.is_client):
           del options.is_client
           return ajax('post', 'json', configuration.url + '/api/search', {'login': self.env.user.login, 'password': self.env.user.password, 'encrypted': True, 'model': self._name, 'args': args, 'options': options}).then(
           def (result):
               record = self.browse(is_singleton=type(result.values) not in tools.array)
               record.values = result.values
               self.browse([rec.id for rec in record.__iter__()])
               return record
           ).catch(
           def (error):
               console.log(error)
               return self.search(args, is_client=False)
           )
        def query(record):
            results = []
            for arg in args:
                if str(arg) in ['|', '[]']:
                   continue
                if arg[1] == '=':
                   results.push(record[arg[0]] == arg[2])
                elif arg[1] == '>':
                   results.push(record[arg[0]] > arg[2])
                elif arg[1] == '>=':
                   results.push(record[arg[0]] >= arg[2])
                elif arg[1] == '<':
                   results.push(record[arg[0]] < arg[2])
                elif arg[1] == '<=':
                   results.push(record[arg[0]] <= arg[2])
                elif arg[1] == 'in':
                   results.push(record[arg[0]] in arg[2])
                elif arg[1] == 'not in':
                   results.push(record[arg[0]] not in arg[2])
                elif arg[1] == 'like':
                   results.push(arg[2] in record[arg[0]])
                elif arg[1] == 'ilike':
                   results.push(str(arg[2]).toLowerCase() in str(record[arg[0]]).toLowerCase())
            if not exist(args) or not exist(args[0]):
               return True
            elif args[0] == '|':
               return results.some(
               def (result):
                   return result == True
               )
            else:
               return results.every( 
               def (result):
                   return result == True
               )
        result = self.browse()
        if options.limit == 1:
           if options.index > 0:
              return Promise(
              def (resolve, reject):
                  resolve(result)
              )
           return db.rel.find(result._name).then(
           def (records):
               records = queryInverse(result._name, records, result._one2many_fields, result._fields)
               record = records[result._name].find(query)
               #result.id = record.id
               result.values = record
               return result
           )
        else:
           return db.rel.find(result._name).then(
           def (records):
               v'var result = new self.constructor(false, false)'
               records = queryInverse(result._name, records, result._one2many_fields, result._fields)
               if records[result._name].length > 1:
                  values = records[result._name].filter(query)
                  if exist(options.limit) and type(options.limit) == Number:
                     start = 0
                     if exist(options.index) and type(options.index) == Number:
                        start = options.index * options.limit
                        options.limit = (options.index + 1) * options.limit
                     result.values = values.slice(start, options.limit)
                  else:
                     result.values = values
                  #result.ids = [value.id for value in result._values]
                  return result
               else:
                  result = self.browse()
                  if options.index > 0:
                     return result
                  record = records[result._name].find(query)
                  #result.id = record.id
                  result.values = record
                  return result
           )
        return result

    def read(self):
        if self._is_env:
           return {}
        return self._values#{key: self.adapt(key, self[key]) for key in self._fields}

    def adapt(self, key, value):
        if self._is_env:
           return
        #if key == 'id':
        #   value = self._fields[key].value
        if self._fields[key].type in ['char', 'text']:
           if not exist(value):
              value = ""
           else:
              value = v'String(value)'
        elif self._fields[key].type == 'integer':
           value = parseInt(value)
           if isNaN(value):
              return Exception("Not a valid Number")
        elif self._fields[key].type == 'float':
           value = parseFloat(value)
           if isNaN(value):
              return Exception("Not a valid Number")
        elif self._fields[key].type == 'boolean':
           if value in ['true', 'True']:
              value = True
           elif value in ['false', 'False', None, undefined]:
              value = False
           elif type(value) == String:
              return Exception("Not a valid Boolean")
           else:
              value = Boolean(value)
        elif self._fields[key].type == 'binary':
           if not checkBase64(value):
              return Exception("Not a valid base64")
        elif self._fields[key].type == 'selection':
           if not exist(value):
              value = None
           elif not value in dict(self._fields[key].selection):
              return Exception("Incorrect value")
        elif self._fields[key].type in ['date', 'datetime']:
           if not exist(value):
              value = None
           elif type(value) == Date:
              value = value.toISOString()
           elif type(value) == String:
              try:
                  value = v'new Date(value).toISOString()'
              except:
                  return Exception("Can't parse Date")
           else:
              return Exception("Can't parse Date")
           if exist(value) and self._fields[key].type == 'date':
              value = value.split('T')[0] + 'T00:00:00.000Z'
        elif self._fields[key].type in ['many2one', 'one2one']:
           if not exist(value):
              return None
           elif v'value instanceof env.Model' == True:
              value = value.id
           elif type(value) in [ρσ_list_constructor, Array] and value.length > 0:
                value = value[0]
        elif self._fields[key].type in ['many2many', 'one2many']:
           if not exist(value):
              value = []
           elif v'value instanceof env.Model' == True:
              value = value.ids
        #Related operation
        if self._fields[key].store:
           if exist(self._fields[key].related):
              self[self._fields[key].related] = value
              self._values[self._fields[key].related] = value
           if exist(self._related[key]):
              for field in self._related[key]:
                  self[field] = value
                  self._values[field] = value
        return value

    def update(self, values=False):
        if self._is_env:
           return
        if not exist(values):
           if self._is_singleton:
              values = {key: self[key] for key in self._fields}
           else:
              values = {}
        for key in values:
            value = self.adapt(key, values[key])
            if self._is_singleton:
               self._values[key] = value
            else:
               for object in self._values:
                   object[key] = value

    def queue(self, method):
        if self._is_env:
           return
        records = self.__iter__()
        index = 0
        def next():
            index += 1
            if index < records.length:
               return method(records[index], next)
            return self
        return method(records[index], next)

    def create(self, values=False, is_client=configuration.client):
        self.update()
        if not exist(values):
           values = self.read()
        else:
           merge(self.read(), values)
        if self._is_env:
           self = self.browse()
           self.update(values)
        if is_client:
           console.log(values)
           return ajax('post', 'json', configuration.url + '/api/create', {'login': self.env.user.login, 'password': self.env.user.password, 'encrypted': True, 'model': self._name, 'values': values}).then(
           def (result):
               self.values = result.values
               self.browse(self.id)
               return self
           ).catch(
           def (error):
               console.log(error)
               return Exception("There is some error")
               #return self.create(values, is_client=False)
           )
        del values['id']
        del values['rev']
        del values['_id']
        del values['_rev']
        return db.rel.save(self._name, values).then(
        def (record):
            #queryInverse(self._name, record, self._one2many_fields, self._fields)
            self.values = record[self._name][0]
            return self
        )
        #return self

    def write(self, values=False, is_client=configuration.client):
        if not exist(self.id) and not exist(self.ids):
           return
        self.update()
        if not exist(values):
           if not self._is_singleton:
              return
           values = self.read()
        else:
           #merge(self.read(), values)
           self.update(values)
           values = self.read()
        if is_client:
           return ajax('post', 'json', configuration.url + '/api/write', {'login': self.env.user.login, 'password': self.env.user.password, 'encrypted': True, 'model': self._name, 'ids': [record.id for record in self.__iter__()], 'values': values}).then(
           def (result):
               self.values = result.values
               self.browse(self.id)
               return self
           ).catch(
           def (error):
               console.log(error)
               #return self.write(values, is_client=False)
               return Exception("There are some error")
           )
        if self._is_singleton:
           return db.get(db.rel.makeDocID({'type': self._name, 'id': self.id})).then(
           def (record):
               #return db.put(merge(values, {'_id': record._id, '_rev': record._rev}))
               del values._id
               del values._rev
               del values.rev
               values.rev = record._rev
               return db.rel.save(self._name, values).then(
               def (result):
                   self.values = values
                   return self
               )
           )
        else:
           return self.queue(
           def (record, next):
               return record.write().then(
               def (result):
                   return next()
               )
           )
           #for value in values:
           #    values._id = db.rel.makeDocID({'type': self._name, 'id': value.id})
           #Turn out bulkDocs and db.put doesn't work on realational-pouch
           #return db.bulkDocs(values).then(
           #def (record):
           #    self.values = record
           #)
        return self

    def unlink(self, is_client=configuration.client):
        if not exist(self.id) and not exist(self.ids):
           return
        if is_client:
           return ajax('post', 'json', configuration.url + '/api/unlink', {'login': self.env.user.login, 'password': self.env.user.password, 'encrypted': True, 'model': self._name, 'ids': [record.id for record in self.__iter__()]}).then(
           def (result):
               return True
           ).catch(
           def (error):
               console.log(error)
               #return self.unlink(is_client=False)
               return False
           )
        if self._is_singleton:
           db.get(db.rel.makeDocID({'type': self._name, 'id': self.id})).then(
           def (record):
               db.remove(record)
           )
        else:
           for value in self._values:
               value['_deleted'] = True
           db.bulkDocs(self._values)
        return True
