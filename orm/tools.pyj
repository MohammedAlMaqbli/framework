def keys(object):
    return Object.keys(object)

def merge(*args):
    #new = {}
    #for object in args:
    #    for key in keys(object):
    #        new[key] = object[key]
    #return new
    #This is a standard operation for merging objects, but for now we will use Object.assign
    target = args[0]
    for object in args[1:]:
        Object.assign(target, object)
    return target

def dict(entries):
    #This is a function to imitate python's dict function that create a dict from a key-value pair
    object = {}
    for entry in entries:
        object[entry[0]] = entry[1]
    return object

def checkBase64(string):
    try:
       return btoa(atob(string)) == string
    except:
       return False

def empty(object):
    if object in ['', False, None, undefined]:
       return True
    object = String(object)
    if object == '{}':
       return True
    elif object == '[]':
       return True

#Polyfill Array.find
v"""if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function(predicate) {
     // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this);

      // 2. Let len be ? ToLength(? Get(O, "length")).
      var len = o.length >>> 0;

      // 3. If IsCallable(predicate) is false, throw a TypeError exception.
      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      }

      // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.
      var thisArg = arguments[1];

      // 5. Let k be 0.
      var k = 0;

      // 6. Repeat, while k < len
      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return kValue.
        var kValue = o[k];
        if (predicate.call(thisArg, kValue, k, o)) {
          return kValue;
        }
        // e. Increase k by 1.
        k++;
      }

      // 7. Return undefined.
      return undefined;
    }
  });
}"""
