#TODO fields.Date and fields.Datetime
from orm.tools import merge

attributes = ['required', 'readonly', 'defaults', 'compute', 'store', 'related']

def Char(string, **args):
    return merge({'type': 'char', 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

def Text(string, **args):
    return merge({'type': 'text', 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

def Integer(string, **args):
    return merge({'type': 'integer', 'string': string, 'defaults': 0}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

def Float(string, **args):
    return merge({'type': 'float', 'string': string, 'defaults': 0.0}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

#While javascript have the same Number type for integer and float, we will differentiate them for data-storing purposes. Integer will be stored with parseInt and float will be stored with parseFloat

def Boolean(string, **args):
    return merge({'type': 'boolean', 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

def Binary(string, **args):
    return merge({'type': 'binary', 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

#Boolean will be stored True or False and Binary will be stored as base64 (btoa and atob), or should we store it with just plain Buffer/Blob? (remember https://pouchdb.com/faq.html#data_types not all browsers support storing Blob)

def Many2one(relation, string, **args):
    return merge({'type': 'many2one', 'relation': relation, 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)


def One2many(relation, inverse, string, **args):
    return merge({'type': 'one2many', 'relation': relation, 'inverse': inverse, 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)


def Many2many(relation, string, **args):
    return merge({'type': 'many2many', 'relation': relation, 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)


def One2one(relation, string, **args):
    return merge({'type': 'one2one', 'relation': relation, 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

def Selection(*selection, **args):
    return merge({'type': 'selection', 'selection': selection, 'string': args.string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

def Date(string, **args):
    return merge({'type': 'date', 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

def Datetime(string, **args):
    return merge({'type': 'datetime', 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)

#Add fields.Data for storing JSON
def Data(string, **args):
    return merge({'type': 'data', 'string': string}, {attribute: args[attribute] or None for attribute in attributes}, reverse=True)
