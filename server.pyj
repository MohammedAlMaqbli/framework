import modules.modules
import orm.http as http
from orm.models import env
from orm.tools import exist, configuration
from res.users import check_admin, admin_password

configuration = require('process').env

admin_password = configuration.admin_password
check_admin()

client_js = require('child_process').execSync('node ./node_modules/.bin/rapydscript -p modules/ client.pyj').toString()

if exist(configuration.port):
   http.port = configuration.port
crypto = require('crypto')

def encrypt(string):
    cipher = crypto.createCipher('aes-256-cbc', configuration.master_password)
    string = cipher.update(string, 'utf-8', 'hex')
    string += cipher.final('hex')
    return string

def decrypt(string):
    decipher = crypto.createDecipher('aes-256-cbc', configuration.master_password)
    string = decipher.update(string, 'hex', 'utf-8')
    string += decipher.final('utf-8')
    return string

http.route('/api/login',
def (request, result, next):
    request.accepts('application/json')
    request.env = env
    result.response = {'status': 'error'}
    params = http.parse(request.params)
    if exist(request.params.login):
       if params.encrypted == True:
          params.login, params.password = decrypt(params.login), decrypt(params.password)
       request.env['res.users'].search(['login', '=', params.login], ['password', '=', params.password]).then(
       def (user_id):
           result.response = {'status': 'success'}
           if params.authentication = True:
              result.response.login, result.response.password = encrypt(params.login), encrypt(params.password)
              result.response.id = user_id.id
              result.response.client_js = client_js
           next()
       ).catch(
       def (error):
           console.log(error)
           result.response = {'status': 'denied'}
           next()
       )
    else:
       next()
,

def (request, result, next):
    return result.send(result.response)
)

http.route('/api/browse',
def (request, result, next):
    if result.response.status != 'success':
       next()
    params = request.params
    if exist(request.params):
       request.env[params.model].browse(params.ids).then(
       def (record):
           result.response = {'status': 'success', 'values': record.values}
           next()
       ).catch(
       def (error):
           console.log(error)
           next()
       )
    else:
       next()
,

def (request, result, next):
    return result.send(result.response)
)

http.route('/api/search',
def (request, result, next):
    if result.response.status != 'success':
       next()
    params = request.params
    if exist(request.params):
       request.env[params.model].search(params.args, limit=params.options.limit, index=params.options.index).then(
       def (record):
           result.response = {'status': 'success', 'values': record.values}
           next()
       ).catch(
       def (error):
           console.log(error)
           next()
       )
    else:
       next()
,

def (request, result, next):
    return result.send(result.response)
)

http.route('/api/create',
def (request, result, next):
    if result.response.status != 'success':
       next()
    params = request.params
    if exist(request.params):
       request.env[params.model].create(params.values).then(
       def (record):
           result.response = {'status': 'success', 'values': record.values}
           next()
       ).catch(
       def (error):
           console.log(error)
           next()
       )
    else:
       next()
,

def (request, result, next):
    return result.send(result.response)
)

http.route('/api/write',
def (request, result, next):
    if result.response.status != 'success':
       next()
    params = request.params
    if exist(request.params):
       request.env[params.model].browse(params.ids).then(
       def (record):
           record.write(params.values).then(
           def (record):
               result.response = {'status': 'success', 'values': record.values}
               next()
           )
       ).catch(
       def (error):
           console.log(error)
           next()
       )
    else:
       next()
,

def (request, result, next):
    return result.send(result.response)
)

http.route('/api/unlink',
def (request, result, next):
    if result.response.status != 'success':
       next()
    params = request.params
    if exist(request.params):
       request.env[params.model].browse(params.ids).then(
       def (record):
           record.unlink().then(
           def ():
               result.response = {'status': 'success'}
               next()
           )
       ).catch(
       def (error):
           console.log(error)
           next()
       )
    else:
       next()
,

def (request, result, next):
    return result.send(result.response)
)

http.route('/api/methods',
def (request, result, next):
    if result.response.status != 'success':
       next()
    params = request.params
    if exist(request.params):
       request.env[params.model].browse(params.ids).then(
       def (record):
           record[params.method]().then(
           def (record):
               result.response = {'status': 'success', 'values': record.values}
               next()
           )
       ).catch(
       def (error):
           console.log(error)
           next()
       )
    else:
       next()
,

def (request, result, next):
    return result.send(result.response)
)

http.Controller().run()
